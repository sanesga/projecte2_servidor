/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable, Injector } from '@angular/core';
import { getActionTypeFromInstance, Store } from '@ngxs/store';
import { tap, catchError } from 'rxjs/operators';
import { NGXS_DEVTOOLS_OPTIONS } from './symbols';
/**
 * Adds support for the Redux Devtools extension:
 * http://extension.remotedev.io/
 */
export class NgxsReduxDevtoolsPlugin {
    /**
     * @param {?} _options
     * @param {?} _injector
     */
    constructor(_options, _injector) {
        this._options = _options;
        this._injector = _injector;
        this.devtoolsExtension = null;
        this.windowObj = typeof window !== 'undefined' ? window : {};
        /** @type {?} */
        const globalDevtools = this.windowObj['__REDUX_DEVTOOLS_EXTENSION__'] || this.windowObj['devToolsExtension'];
        if (globalDevtools) {
            this.devtoolsExtension = (/** @type {?} */ (globalDevtools.connect(_options)));
            this.devtoolsExtension.subscribe((/**
             * @param {?} a
             * @return {?}
             */
            a => this.dispatched(a)));
        }
    }
    /**
     * Lazy get the store for circular dependency issues
     * @private
     * @return {?}
     */
    get store() {
        return this._injector.get(Store);
    }
    /**
     * Middleware handle function
     * @param {?} state
     * @param {?} action
     * @param {?} next
     * @return {?}
     */
    handle(state, action, next) {
        /** @type {?} */
        const isDisabled = this._options && this._options.disabled;
        if (!this.devtoolsExtension || isDisabled) {
            return next(state, action);
        }
        return next(state, action).pipe(catchError((/**
         * @param {?} error
         * @return {?}
         */
        error => {
            /** @type {?} */
            const newState = this.store.snapshot();
            this.sendToDevTools(state, action, newState);
            throw error;
        })), tap((/**
         * @param {?} newState
         * @return {?}
         */
        newState => {
            this.sendToDevTools(state, action, newState);
        })));
    }
    /**
     * @private
     * @param {?} state
     * @param {?} action
     * @param {?} newState
     * @return {?}
     */
    sendToDevTools(state, action, newState) {
        /** @type {?} */
        const type = getActionTypeFromInstance(action);
        // if init action, send initial state to dev tools
        /** @type {?} */
        const isInitAction = type === '@@INIT';
        if (isInitAction) {
            (/** @type {?} */ (this.devtoolsExtension)).init(state);
        }
        else {
            (/** @type {?} */ (this.devtoolsExtension)).send(Object.assign({}, action, { type }), newState);
        }
    }
    /**
     * Handle the action from the dev tools subscription
     * @param {?} action
     * @return {?}
     */
    dispatched(action) {
        if (action.type === 'DISPATCH') {
            if (action.payload.type === 'JUMP_TO_ACTION' ||
                action.payload.type === 'JUMP_TO_STATE') {
                /** @type {?} */
                const prevState = JSON.parse(action.state);
                this.store.reset(prevState);
            }
            else if (action.payload.type === 'TOGGLE_ACTION') {
                console.warn('Skip is not supported at this time.');
            }
            else if (action.payload.type === 'IMPORT_STATE') {
                const { actionsById, computedStates, currentStateIndex } = action.payload.nextLiftedState;
                (/** @type {?} */ (this.devtoolsExtension)).init(computedStates[0].state);
                Object.keys(actionsById)
                    .filter((/**
                 * @param {?} actionId
                 * @return {?}
                 */
                actionId => actionId !== '0'))
                    .forEach((/**
                 * @param {?} actionId
                 * @return {?}
                 */
                actionId => (/** @type {?} */ (this.devtoolsExtension)).send(actionsById[actionId], computedStates[actionId].state)));
                this.store.reset(computedStates[currentStateIndex].state);
            }
        }
        else if (action.type === 'ACTION') {
            /** @type {?} */
            const actionPayload = JSON.parse(action.payload);
            this.store.dispatch(actionPayload);
        }
    }
}
NgxsReduxDevtoolsPlugin.decorators = [
    { type: Injectable }
];
/** @nocollapse */
NgxsReduxDevtoolsPlugin.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [NGXS_DEVTOOLS_OPTIONS,] }] },
    { type: Injector }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxsReduxDevtoolsPlugin.prototype.devtoolsExtension;
    /**
     * @type {?}
     * @private
     */
    NgxsReduxDevtoolsPlugin.prototype.windowObj;
    /**
     * @type {?}
     * @private
     */
    NgxsReduxDevtoolsPlugin.prototype._options;
    /**
     * @type {?}
     * @private
     */
    NgxsReduxDevtoolsPlugin.prototype._injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2dG9vbHMucGx1Z2luLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neHMvZGV2dG9vbHMtcGx1Z2luLyIsInNvdXJjZXMiOlsic3JjL2RldnRvb2xzLnBsdWdpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdELE9BQU8sRUFBRSx5QkFBeUIsRUFBZ0MsS0FBSyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQzdGLE9BQU8sRUFBRSxHQUFHLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFakQsT0FBTyxFQUNMLHFCQUFxQixFQUl0QixNQUFNLFdBQVcsQ0FBQzs7Ozs7QUFPbkIsTUFBTSxPQUFPLHVCQUF1Qjs7Ozs7SUFJbEMsWUFDeUMsUUFBNkIsRUFDNUQsU0FBbUI7UUFEWSxhQUFRLEdBQVIsUUFBUSxDQUFxQjtRQUM1RCxjQUFTLEdBQVQsU0FBUyxDQUFVO1FBTFosc0JBQWlCLEdBQWlDLElBQUksQ0FBQztRQUN2RCxjQUFTLEdBQVEsT0FBTyxNQUFNLEtBQUssV0FBVyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQzs7Y0FNdEUsY0FBYyxHQUNsQixJQUFJLENBQUMsU0FBUyxDQUFDLDhCQUE4QixDQUFDLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQztRQUN2RixJQUFJLGNBQWMsRUFBRTtZQUNsQixJQUFJLENBQUMsaUJBQWlCLEdBQUcsbUJBQUEsY0FBYyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBeUIsQ0FBQztZQUNuRixJQUFJLENBQUMsaUJBQWlCLENBQUMsU0FBUzs7OztZQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDO1NBQzNEO0lBQ0gsQ0FBQzs7Ozs7O0lBS0QsSUFBWSxLQUFL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QUNKLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQzNEO1NBQ0Y7YUFBTSxJQUFJLE1BQU0sQ0FBQyxJQUFJLEtBQUssUUFBUSxFQUFFOztrQkFDN0IsYUFBYSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQztZQUNoRCxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUNwQztJQUNILENBQUM7OztZQXZGRixVQUFVOzs7OzRDQU1OLE1BQU0sU0FBQyxxQkFBcUI7WUFyQkosUUFBUTs7Ozs7OztJQWlCbkMsb0RBQXdFOzs7OztJQUN4RSw0Q0FBOEU7Ozs7O0lBRzVFLDJDQUFvRTs7Ozs7SUFDcEUsNENBQTJCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBnZXRBY3Rpb25UeXBlRnJvbUluc3RhbmNlLCBOZ3hzTmV4dFBsdWdpbkZuLCBOZ3hzUGx1Z2luLCBTdG9yZSB9IGZyb20gJ0BuZ3hzL3N0b3JlJztcclxuaW1wb3J0IHsgdGFwLCBjYXRjaEVycm9yIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5cclxuaW1wb3J0IHtcclxuICBOR1hTX0RFVlRPT0xTX09QVElPTlMsXHJcbiAgTmd4c0RldnRvb2xzQWN0aW9uLFxyXG4gIE5neHNEZXZ0b29sc0V4dGVuc2lvbixcclxuICBOZ3hzRGV2dG9vbHNPcHRpb25zXHJcbn0gZnJvbSAnLi9zeW1ib2xzJztcclxuXHJcbi8qKlxyXG4gKiBBZGRzIHN1cHBvcnQgZm9yIHRoZSBSZWR1eCBEZXZ0b29scyBleHRlbnNpb246XHJcbiAqIGh0dHA6Ly9leHRlbnNpb24ucmVtb3RlZGV2LmlvL1xyXG4gKi9cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgTmd4c1JlZHV4RGV2dG9vbHNQbHVnaW4gaW1wbGVtZW50cyBOZ3hzUGx1Z2luIHtcclxuICBwcml2YXRlIHJlYWRvbmx5IGRldnRvb2xzRXh0ZW5zaW9uOiBOZ3hzRGV2dG9vbHNFeHRlbnNpb24gfCBudWxsID0gbnVsbDtcclxuICBwcml2YXRlIHJlYWRvbmx5IHdpbmRvd09iajogYW55ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB7fTtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBASW5qZWN0KE5HWFNfREVWVE9PTFNfT1BUSU9OUykgcHJpdmF0ZSBfb3B0aW9uczogTmd4c0RldnRvb2xzT3B0aW9ucyxcclxuICAgIHByaXZhdGUgX2luamVjdG9yOiBJbmplY3RvclxyXG4gICkge1xyXG4gICAgY29uc3QgZ2xvYmFsRGV2dG9vbHMgPVxyXG4gICAgICB0aGlzLndpbmRvd09ialsnX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fXyddIHx8IHRoaXMud2luZG93T2JqWydkZXZUb29sc0V4dGVuc2lvbiddO1xyXG4gICAgaWYgKGdsb2JhbERldnRvb2xzKSB7XHJcbiAgICAgIHRoaXMuZGV2dG9vbHNFeHRlbnNpb24gPSBnbG9iYWxEZXZ0b29scy5jb25uZWN0KF9vcHRpb25zKSBhcyBOZ3hzRGV2dG9vbHNFeHRlbnNpb247XHJcbiAgICAgIHRoaXMuZGV2dG9vbHNFeHRlbnNpb24uc3Vic2NyaWJlKGEgPT4gdGhpcy5kaXNwYXRjaGVkKGEpKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIExhenkgZ2V0IHRoZSBzdG9yZSBmb3IgY2lyY3VsYXIgZGVwZW5kZW5jeSBpc3N1ZXNcclxuICAgKi9cclxuICBwcml2YXRlIGdldCBzdG9yZSgpOiBTdG9yZSB7XHJcbiAgICByZXR1cm4gdGhpcy5faW5qZWN0b3IuZ2V0PFN0b3JlPihTdG9yZSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBNaWRkbGV3YXJlIGhhbmRsZSBmdW5jdGlvblxyXG4gICAqL1xyXG4gIGhhbmRsZShzdGF0ZTogYW55LCBhY3Rpb246IGFueSwgbmV4dDogTmd4c05leHRQbHVnaW5Gbikge1xyXG4gICAgY29uc3QgaXNEaXNhYmxlZCA9IHRoaXMuX29wdGlvbnMgJiYgdGhpcy5fb3B0aW9ucy5kaXNhYmxlZDtcclxuICAgIGlmICghdGhpcy5kZXZ0b29sc0V4dGVuc2lvbiB8fCBpc0Rpc2FibGVkKSB7XHJcbiAgICAgIHJldHVybiBuZXh0KHN0YXRlLCBhY3Rpb24pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBuZXh0KHN0YXRlLCBhY3Rpb24pLnBpcGUoXHJcbiAgICAgIGNhdGNoRXJyb3IoZXJyb3IgPT4ge1xyXG4gICAgICAgIGNvbnN0IG5ld1N0YXRlID0gdGhpcy5zdG9yZS5zbmFwc2hvdCgpO1xyXG4gICAgICAgIHRoaXMuc2VuZFRvRGV2VG9vbHMoc3RhdGUsIGFjdGlvbiwgbmV3U3RhdGUpO1xyXG4gICAgICAgIHRocm93IGVycm9yO1xyXG4gICAgICB9KSxcclxuICAgICAgdGFwKG5ld1N0YXRlID0+IHtcclxuICAgICAgICB0aGlzLnNlbmRUb0RldlRvb2xzKHN0YXRlLCBhY3Rpb24sIG5ld1N0YXRlKTtcclxuICAgICAgfSlcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHNlbmRUb0RldlRvb2xzKHN0YXRlOiBhbnksIGFjdGlvbjogYW55LCBuZXdTdGF0ZTogYW55KSB7XHJcbiAgICBjb25zdCB0eXBlID0gZ2V0QWN0aW9uVHlwZUZyb21JbnN0YW5jZShhY3Rpb24pO1xyXG4gICAgLy8gaWYgaW5pdCBhY3Rpb24sIHNlbmQgaW5pdGlhbCBzdGF0ZSB0byBkZXYgdG9vbHNcclxuICAgIGNvbnN0IGlzSW5pdEFjdGlvbiA9IHR5cGUgPT09ICdAQElOSVQnO1xyXG4gICAgaWYgKGlzSW5pdEFjdGlvbikge1xyXG4gICAgICB0aGlzLmRldnRvb2xzRXh0ZW5zaW9uIS5pbml0KHN0YXRlKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuZGV2dG9vbHNFeHRlbnNpb24hLnNlbmQoeyAuLi5hY3Rpb24sIHR5cGUgfSwgbmV3U3RhdGUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSGFuZGxlIHRoZSBhY3Rpb24gZnJvbSB0aGUgZGV2IHRvb2xzIHN1YnNjcmlwdGlvblxyXG4gICAqL1xyXG4gIGRpc3BhdGNoZWQoYWN0aW9uOiBOZ3hzRGV2dG9vbHNBY3Rpb24pIHtcclxuICAgIGlmIChhY3Rpb24udHlwZSA9PT0gJ0RJU1BBVENIJykge1xyXG4gICAgICBpZiAoXHJcbiAgICAgICAgYWN0aW9uLnBheWxvYWQudHlwZSA9PT0gJ0pVTVBfVE9fQUNUSU9OJyB8fFxyXG4gICAgICAgIGFjdGlvbi5wYXlsb2FkLnR5cGUgPT09ICdKVU1QX1RPX1NUQVRFJ1xyXG4gICAgICApIHtcclxuICAgICAgICBjb25zdCBwcmV2U3RhdGUgPSBKU09OLnBhcnNlKGFjdGlvbi5zdGF0ZSk7XHJcbiAgICAgICAgdGhpcy5zdG9yZS5yZXNldChwcmV2U3RhdGUpO1xyXG4gICAgICB9IGVsc2UgaWYgKGFjdGlvbi5wYXlsb2FkLnR5cGUgPT09ICdUT0dHTEVfQUNUSU9OJykge1xyXG4gICAgICAgIGNvbnNvbGUud2FybignU2tpcCBpcyBub3Qgc3VwcG9ydGVkIGF0IHRoaXMgdGltZS4nKTtcclxuICAgICAgfSBlbHNlIGlmIChhY3Rpb24ucGF5bG9hZC50eXBlID09PSAnSU1QT1JUX1NUQVRFJykge1xyXG4gICAgICAgIGNvbnN0IHtcclxuICAgICAgICAgIGFjdGlvbnNCeUlkLFxyXG4gICAgICAgICAgY29tcHV0ZWRTdGF0ZXMsXHJcbiAgICAgICAgICBjdXJyZW50U3RhdGVJbmRleFxyXG4gICAgICAgIH0gPSBhY3Rpb24ucGF5bG9hZC5uZXh0TGlmdGVkU3RhdGU7XHJcbiAgICAgICAgdGhpcy5kZXZ0b29sc0V4dGVuc2lvbiEuaW5pdChjb21wdXRlZFN0YXRlc1swXS5zdGF0ZSk7XHJcbiAgICAgICAgT2JqZWN0LmtleXMoYWN0aW9uc0J5SWQpXHJcbiAgICAgICAgICAuZmlsdGVyKGFjdGlvbklkID0+IGFjdGlvbklkICE9PSAnMCcpXHJcbiAgICAgICAgICAuZm9yRWFjaChhY3Rpb25JZCA9PlxyXG4gICAgICAgICAgICB0aGlzLmRldnRvb2xzRXh0ZW5zaW9uIS5zZW5kKGFjdGlvbnNCeUlkW2FjdGlvbklkXSwgY29tcHV0ZWRTdGF0ZXNbYWN0aW9uSWRdLnN0YXRlKVxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB0aGlzLnN0b3JlLnJlc2V0KGNvbXB1dGVkU3RhdGVzW2N1cnJlbnRTdGF0ZUluZGV4XS5zdGF0ZSk7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSBpZiAoYWN0aW9uLnR5cGUgPT09ICdBQ1RJT04nKSB7XHJcbiAgICAgIGNvbnN0IGFjdGlvblBheWxvYWQgPSBKU09OLnBhcnNlKGFjdGlvbi5wYXlsb2FkKTtcclxuICAgICAgdGhpcy5zdG9yZS5kaXNwYXRjaChhY3Rpb25QYXlsb2FkKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19