/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CONFIG_MESSAGES, VALIDATION_CODE } from '../../configs/messages.config';
import { createSelector } from '../../utils/selector-utils';
/**
 * Decorator for memoizing a state selector.
 * @template T
 * @param {?=} selectors
 * @return {?}
 */
export function Selector(selectors) {
    return (/**
     * @template U
     * @param {?} target
     * @param {?} key
     * @param {?} descriptor
     * @return {?}
     */
    (target, key, descriptor) => {
        /** @type {?} */
        const isNotMethod = !(descriptor && descriptor.value !== null);
        if (isNotMethod) {
            throw new Error(CONFIG_MESSAGES[VALIDATION_CODE.SELECTOR_DECORATOR]());
        }
        /** @type {?} */
        const originalFn = descriptor.value;
        /** @type {?} */
        let memoizedFn = null;
        /** @type {?} */
        const newDescriptor = {
            configurable: true,
            /**
             * @return {?}
             */
            get() {
                // Selector initialisation deferred to here so that it is at runtime, not decorator parse time
                memoizedFn =
                    memoizedFn ||
                        createSelector(selectors, (/** @type {?} */ (originalFn)), {
                            containerClass: target,
                            selectorName: key.toString(),
                            /**
                             * @return {?}
                             */
                            getSelectorOptions() {
                                return {};
                            }
                        });
                return memoizedFn;
            }
        };
        // Add hidden property to descriptor
        ((/** @type {?} */ (newDescriptor)))['originalFn'] = originalFn;
        return newDescriptor;
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0b3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4cy9zdG9yZS8iLCJzb3VyY2VzIjpbInNyYy9kZWNvcmF0b3JzL3NlbGVjdG9yL3NlbGVjdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsZUFBZSxFQUFFLGVBQWUsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ2pGLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQzs7Ozs7OztBQU01RCxNQUFNLFVBQVUsUUFBUSxDQUFJLFNBQWU7SUFDekM7Ozs7Ozs7SUFBTyxDQUNMLE1BQVcsRUFDWCxHQUFvQixFQUNwQixVQUF1RCxFQUNILEVBQUU7O2NBQ2hELFdBQVcsR0FBRyxDQUFDLENBQUMsVUFBVSxJQUFJLFVBQVUsQ0FBQyxLQUFLLEtBQUssSUFBSSxDQUFDO1FBRTlELElBQUksV0FBVyxFQUFFO1lBQ2YsTUFBTSxJQUFJLEtBQUssQ0FBQyxlQUFlLENBQUMsZUFBZSxDQUFDLGtCQUFrQixDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ3hFOztjQUVLLFVBQVUsR0FBRyxVQUFVLENBQUMsS0FBSzs7WUFDL0IsVUFBVSxHQUFRLElBQUk7O2NBQ3BCLGFBQWEsR0FBRztZQUNwQixZQUFZLEVBQUUsSUFBSTs7OztZQUNsQixHQUFHO2dCQUNELDhGQUE4RjtnQkFDOUYsVUFBVTtvQkFDUixVQUFVO3dCQUNWLGNBQWMsQ0FDWixTQUFTLEVBQ1QsbUJBQUEsVUFBVSxFQUFPLEVBQ2pCOzRCQUNFLGNBQWMsRUFBRSxNQUFNOzRCQUN0QixZQUFZLEVBQUUsR0FBRyxDQUFDLFFBQVEsRUFBRTs7Ozs0QkFDNUIsa0JBQWtCO2dDQUNoQixPQUFPLEVBQUUsQ0FBQzs0QkFDWixDQUFDO3lCQUNGLENBQ0YsQ0FBQztnQkFDSixPQUFPLFVBQVUsQ0FBQztZQUNwQixDQUFDO1NBQ0Y7UUFDRCxvQ0FBb0M7UUFDcEMsQ0FBQyxtQkFBSyxhQUFhLEVBQUEsQ0FBQyxDQUFDLFlBQVksQ0FBQyxHQUFHLFVBQVUsQ0FBQztRQUNoRCxPQUFPLGFBQWEsQ0FBQztJQUN2QixDQUFDLEVBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ09ORklHX01FU1NBR0VTLCBWQUxJREFUSU9OX0NPREUgfSBmcm9tICcuLi8uLi9jb25maWdzL21lc3NhZ2VzLmNvbmZpZyc7XHJcbmltcG9ydCB7IGNyZWF0ZVNlbGVjdG9yIH0gZnJvbSAnLi4vLi4vdXRpbHMvc2VsZWN0b3ItdXRpbHMnO1xyXG5pbXBvcnQgeyBTZWxlY3RvclNwZWMsIFNlbGVjdG9yVHlwZSB9IGZyb20gJy4vc3ltYm9scyc7XHJcblxyXG4vKipcclxuICogRGVjb3JhdG9yIGZvciBtZW1vaXppbmcgYSBzdGF0ZSBzZWxlY3Rvci5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBTZWxlY3RvcjxUPihzZWxlY3RvcnM/OiBUW10pOiBTZWxlY3RvclR5cGU8VD4ge1xyXG4gIHJldHVybiA8VT4oXHJcbiAgICB0YXJnZXQ6IGFueSxcclxuICAgIGtleTogc3RyaW5nIHwgc3ltYm9sLFxyXG4gICAgZGVzY3JpcHRvcjogVHlwZWRQcm9wZXJ0eURlc2NyaXB0b3I8U2VsZWN0b3JTcGVjPFQsIFU+PlxyXG4gICk6IFR5cGVkUHJvcGVydHlEZXNjcmlwdG9yPFNlbGVjdG9yU3BlYzxULCBVPj4gfCB2b2lkID0+IHtcclxuICAgIGNvbnN0IGlzTm90TWV0aG9kID0gIShkZXNjcmlwdG9yICYmIGRlc2NyaXB0b3IudmFsdWUgIT09IG51bGwpO1xyXG5cclxuICAgIGlmIChpc05vdE1ldGhvZCkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoQ09ORklHX01FU1NBR0VTW1ZBTElEQVRJT05fQ09ERS5TRUxFQ1RPUl9ERUNPUkFUT1JdKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IG9yaWdpbmFsRm4gPSBkZXNjcmlwdG9yLnZhbHVlO1xyXG4gICAgbGV0IG1lbW9pemVkRm46IGFueSA9IG51bGw7XHJcbiAgICBjb25zdCBuZXdEZXNjcmlwdG9yID0ge1xyXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgICAgIGdldCgpIHtcclxuICAgICAgICAvLyBTZWxlY3RvciBpbml0aWFsaXNhdGlvbiBkZWZlcnJlZCB0byBoZXJlIHNvIHRoYXQgaXQgaXMgYXQgcnVudGltZSwgbm90IGRlY29yYXRvciBwYXJzZSB0aW1lXHJcbiAgICAgICAgbWVtb2l6ZWRGbiA9XHJcbiAgICAgICAgICBtZW1vaXplZEZuIHx8XHJcbiAgICAgICAgICBjcmVhdGVTZWxlY3RvcihcclxuICAgICAgICAgICAgc2VsZWN0b3JzLFxyXG4gICAgICAgICAgICBvcmlnaW5hbEZuIGFzIGFueSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIGNvbnRhaW5lckNsYXNzOiB0YXJnZXQsXHJcbiAgICAgICAgICAgICAgc2VsZWN0b3JOYW1lOiBrZXkudG9TdHJpbmcoKSxcclxuICAgICAgICAgICAgICBnZXRTZWxlY3Rvck9wdGlvbnMoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge307XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIHJldHVybiBtZW1vaXplZEZuO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gICAgLy8gQWRkIGhpZGRlbiBwcm9wZXJ0eSB0byBkZXNjcmlwdG9yXHJcbiAgICAoPGFueT5uZXdEZXNjcmlwdG9yKVsnb3JpZ2luYWxGbiddID0gb3JpZ2luYWxGbjtcclxuICAgIHJldHVybiBuZXdEZXNjcmlwdG9yO1xyXG4gIH07XHJcbn1cclxuIl19