/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { createSelectObservable, createSelectorFn } from './symbols';
/**
 * Decorator for selecting a slice of state from the store.
 * @template T
 * @param {?=} rawSelector
 * @param {...?} paths
 * @return {?}
 */
export function Select(rawSelector) {
    var paths = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        paths[_i - 1] = arguments[_i];
    }
    return (/**
     * @template U, K
     * @param {?} target
     * @param {?} key
     * @return {?}
     */
    function (target, key) {
        var _a;
        /** @type {?} */
        var name = key.toString();
        /** @type {?} */
        var selectorId = "__" + name + "__selector";
        /** @type {?} */
        var selector = createSelectorFn(name, rawSelector, paths);
        Object.defineProperties(target, (_a = {},
            _a[selectorId] = {
                writable: true,
                enumerable: false,
                configurable: true
            },
            _a[name] = {
                enumerable: true,
                configurable: true,
                get: /**
                 * @return {?}
                 */
                function () {
                    return this[selectorId] || (this[selectorId] = createSelectObservable(selector));
                }
            },
            _a));
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neHMvc3RvcmUvIiwic291cmNlcyI6WyJzcmMvZGVjb3JhdG9ycy9zZWxlY3Qvc2VsZWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBRUwsc0JBQXNCLEVBQ3RCLGdCQUFnQixFQUdqQixNQUFNLFdBQVcsQ0FBQzs7Ozs7Ozs7QUFLbkIsTUFBTSxVQUFVLE1BQU0sQ0FBSSxXQUFlO0lBQUUsZUFBa0I7U0FBbEIsVUFBa0IsRUFBbEIscUJBQWtCLEVBQWxCLElBQWtCO1FBQWxCLDhCQUFrQjs7SUFDM0Q7Ozs7OztJQUFPLFVBR0wsTUFBUyxFQUFFLEdBQU07OztZQUNYLElBQUksR0FBVyxHQUFHLENBQUMsUUFBUSxFQUFFOztZQUM3QixVQUFVLEdBQUcsT0FBSyxJQUFJLGVBQVk7O1lBQ2xDLFFBQVEsR0FBRyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsV0FBVyxFQUFFLEtBQUssQ0FBQztRQUUzRCxNQUFNLENBQUMsZ0JBQWdCLENBQUMsTUFBTTtZQUM1QixHQUFDLFVBQVUsSUFBRztnQkFDWixRQUFRLEVBQUUsSUFBSTtnQkFDZCxVQUFVLEVBQUUsS0FBSztnQkFDakIsWUFBWSxFQUFFLElBQUk7YUFDbkI7WUFDRCxHQUFDLElBQUksSUFBRztnQkFDTixVQUFVLEVBQUUsSUFBSTtnQkFDaEIsWUFBWSxFQUFFLElBQUk7Z0JBQ2xCLEdBQUc7OztnQkFBSDtvQkFDRSxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxzQkFBc0IsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO2dCQUNuRixDQUFDO2FBQ0Y7Z0JBQ0QsQ0FBQztJQUNMLENBQUMsRUFBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIENvbXBvbmVudENsYXNzLFxyXG4gIGNyZWF0ZVNlbGVjdE9ic2VydmFibGUsXHJcbiAgY3JlYXRlU2VsZWN0b3JGbixcclxuICBQcm9wZXJ0eVR5cGUsXHJcbiAgU2VsZWN0VHlwZVxyXG59IGZyb20gJy4vc3ltYm9scyc7XHJcblxyXG4vKipcclxuICogRGVjb3JhdG9yIGZvciBzZWxlY3RpbmcgYSBzbGljZSBvZiBzdGF0ZSBmcm9tIHRoZSBzdG9yZS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBTZWxlY3Q8VD4ocmF3U2VsZWN0b3I/OiBULCAuLi5wYXRoczogc3RyaW5nW10pOiBTZWxlY3RUeXBlPFQ+IHtcclxuICByZXR1cm4gZnVuY3Rpb248XHJcbiAgICBVIGV4dGVuZHMgQ29tcG9uZW50Q2xhc3M8YW55PiAmIFJlY29yZDxLLCBQcm9wZXJ0eVR5cGU8VD4+LFxyXG4gICAgSyBleHRlbmRzIHN0cmluZ1xyXG4gID4odGFyZ2V0OiBVLCBrZXk6IEspOiB2b2lkIHtcclxuICAgIGNvbnN0IG5hbWU6IHN0cmluZyA9IGtleS50b1N0cmluZygpO1xyXG4gICAgY29uc3Qgc2VsZWN0b3JJZCA9IGBfXyR7bmFtZX1fX3NlbGVjdG9yYDtcclxuICAgIGNvbnN0IHNlbGVjdG9yID0gY3JlYXRlU2VsZWN0b3JGbihuYW1lLCByYXdTZWxlY3RvciwgcGF0aHMpO1xyXG5cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwge1xyXG4gICAgICBbc2VsZWN0b3JJZF06IHtcclxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgfSxcclxuICAgICAgW25hbWVdOiB7XHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgICAgICAgZ2V0KCk6IFByb3BlcnR5VHlwZTxUPiB7XHJcbiAgICAgICAgICByZXR1cm4gdGhpc1tzZWxlY3RvcklkXSB8fCAodGhpc1tzZWxlY3RvcklkXSA9IGNyZWF0ZVNlbGVjdE9ic2VydmFibGUoc2VsZWN0b3IpKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH07XHJcbn1cclxuIl19