/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CONFIG_MESSAGES, VALIDATION_CODE } from '../../configs/messages.config';
import { createSelector } from '../../utils/selector-utils';
/**
 * Decorator for memoizing a state selector.
 * @template T
 * @param {?=} selectors
 * @return {?}
 */
export function Selector(selectors) {
    return (/**
     * @template U
     * @param {?} target
     * @param {?} key
     * @param {?} descriptor
     * @return {?}
     */
    function (target, key, descriptor) {
        /** @type {?} */
        var isNotMethod = !(descriptor && descriptor.value !== null);
        if (isNotMethod) {
            throw new Error(CONFIG_MESSAGES[VALIDATION_CODE.SELECTOR_DECORATOR]());
        }
        /** @type {?} */
        var originalFn = descriptor.value;
        /** @type {?} */
        var memoizedFn = null;
        /** @type {?} */
        var newDescriptor = {
            configurable: true,
            get: /**
             * @return {?}
             */
            function () {
                // Selector initialisation deferred to here so that it is at runtime, not decorator parse time
                memoizedFn =
                    memoizedFn ||
                        createSelector(selectors, (/** @type {?} */ (originalFn)), {
                            containerClass: target,
                            selectorName: key.toString(),
                            getSelectorOptions: /**
                             * @return {?}
                             */
                            function () {
                                return {};
                            }
                        });
                return memoizedFn;
            }
        };
        // Add hidden property to descriptor
        ((/** @type {?} */ (newDescriptor)))['originalFn'] = originalFn;
        return newDescriptor;
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0b3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4cy9zdG9yZS8iLCJzb3VyY2VzIjpbInNyYy9kZWNvcmF0b3JzL3NlbGVjdG9yL3NlbGVjdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsZUFBZSxFQUFFLGVBQWUsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ2pGLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQzs7Ozs7OztBQU01RCxNQUFNLFVBQVUsUUFBUSxDQUFJLFNBQWU7SUFDekM7Ozs7Ozs7SUFBTyxVQUNMLE1BQVcsRUFDWCxHQUFvQixFQUNwQixVQUF1RDs7WUFFakQsV0FBVyxHQUFHLENBQUMsQ0FBQyxVQUFVLElBQUksVUFBVSxDQUFDLEtBQUssS0FBSyxJQUFJLENBQUM7UUFFOUQsSUFBSSxXQUFXLEVBQUU7WUFDZixNQUFNLElBQUksS0FBSyxDQUFDLGVBQWUsQ0FBQyxlQUFlLENBQUMsa0JBQWtCLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDeEU7O1lBRUssVUFBVSxHQUFHLFVBQVUsQ0FBQyxLQUFLOztZQUMvQixVQUFVLEdBQVEsSUFBSTs7WUFDcEIsYUFBYSxHQUFHO1lBQ3BCLFlBQVksRUFBRSxJQUFJO1lBQ2xCLEdBQUc7Ozs7Z0JBQ0QsOEZBQThGO2dCQUM5RixVQUFVO29CQUNSLFVBQVU7d0JBQ1YsY0FBYyxDQUNaLFNBQVMsRUFDVCxtQkFBQSxVQUFVLEVBQU8sRUFDakI7NEJBQ0UsY0FBYyxFQUFFLE1BQU07NEJBQ3RCLFlBQVksRUFBRSxHQUFHLENBQUMsUUFBUSxFQUFFOzRCQUM1QixrQkFBa0I7Ozs7Z0NBQ2hCLE9BQU8sRUFBRSxDQUFDOzRCQUNaLENBQUM7eUJBQ0YsQ0FDRixDQUFDO2dCQUNKLE9BQU8sVUFBVSxDQUFDO1lBQ3BCLENBQUM7U0FDRjtRQUNELG9DQUFvQztRQUNwQyxDQUFDLG1CQUFLLGFBQWEsRUFBQSxDQUFDLENBQUMsWUFBWSxDQUFDLEdBQUcsVUFBVSxDQUFDO1FBQ2hELE9BQU8sYUFBYSxDQUFDO0lBQ3ZCLENBQUMsRUFBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDT05GSUdfTUVTU0FHRVMsIFZBTElEQVRJT05fQ09ERSB9IGZyb20gJy4uLy4uL2NvbmZpZ3MvbWVzc2FnZXMuY29uZmlnJztcclxuaW1wb3J0IHsgY3JlYXRlU2VsZWN0b3IgfSBmcm9tICcuLi8uLi91dGlscy9zZWxlY3Rvci11dGlscyc7XHJcbmltcG9ydCB7IFNlbGVjdG9yU3BlYywgU2VsZWN0b3JUeXBlIH0gZnJvbSAnLi9zeW1ib2xzJztcclxuXHJcbi8qKlxyXG4gKiBEZWNvcmF0b3IgZm9yIG1lbW9pemluZyBhIHN0YXRlIHNlbGVjdG9yLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIFNlbGVjdG9yPFQ+KHNlbGVjdG9ycz86IFRbXSk6IFNlbGVjdG9yVHlwZTxUPiB7XHJcbiAgcmV0dXJuIDxVPihcclxuICAgIHRhcmdldDogYW55LFxyXG4gICAga2V5OiBzdHJpbmcgfCBzeW1ib2wsXHJcbiAgICBkZXNjcmlwdG9yOiBUeXBlZFByb3BlcnR5RGVzY3JpcHRvcjxTZWxlY3RvclNwZWM8VCwgVT4+XHJcbiAgKTogVHlwZWRQcm9wZXJ0eURlc2NyaXB0b3I8U2VsZWN0b3JTcGVjPFQsIFU+PiB8IHZvaWQgPT4ge1xyXG4gICAgY29uc3QgaXNOb3RNZXRob2QgPSAhKGRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci52YWx1ZSAhPT0gbnVsbCk7XHJcblxyXG4gICAgaWYgKGlzTm90TWV0aG9kKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihDT05GSUdfTUVTU0FHRVNbVkFMSURBVElPTl9DT0RFLlNFTEVDVE9SX0RFQ09SQVRPUl0oKSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qgb3JpZ2luYWxGbiA9IGRlc2NyaXB0b3IudmFsdWU7XHJcbiAgICBsZXQgbWVtb2l6ZWRGbjogYW55ID0gbnVsbDtcclxuICAgIGNvbnN0IG5ld0Rlc2NyaXB0b3IgPSB7XHJcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuICAgICAgZ2V0KCkge1xyXG4gICAgICAgIC8vIFNlbGVjdG9yIGluaXRpYWxpc2F0aW9uIGRlZmVycmVkIHRvIGhlcmUgc28gdGhhdCBpdCBpcyBhdCBydW50aW1lLCBub3QgZGVjb3JhdG9yIHBhcnNlIHRpbWVcclxuICAgICAgICBtZW1vaXplZEZuID1cclxuICAgICAgICAgIG1lbW9pemVkRm4gfHxcclxuICAgICAgICAgIGNyZWF0ZVNlbGVjdG9yKFxyXG4gICAgICAgICAgICBzZWxlY3RvcnMsXHJcbiAgICAgICAgICAgIG9yaWdpbmFsRm4gYXMgYW55LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgY29udGFpbmVyQ2xhc3M6IHRhcmdldCxcclxuICAgICAgICAgICAgICBzZWxlY3Rvck5hbWU6IGtleS50b1N0cmluZygpLFxyXG4gICAgICAgICAgICAgIGdldFNlbGVjdG9yT3B0aW9ucygpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7fTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICk7XHJcbiAgICAgICAgcmV0dXJuIG1lbW9pemVkRm47XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICAvLyBBZGQgaGlkZGVuIHByb3BlcnR5IHRvIGRlc2NyaXB0b3JcclxuICAgICg8YW55Pm5ld0Rlc2NyaXB0b3IpWydvcmlnaW5hbEZuJ10gPSBvcmlnaW5hbEZuO1xyXG4gICAgcmV0dXJuIG5ld0Rlc2NyaXB0b3I7XHJcbiAgfTtcclxufVxyXG4iXX0=