/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ReplaySubject } from 'rxjs';
/**
 * Keep it as a single `const` variable since this `ReplaySubject`
 * will be private and accessible only within this file.
 * @type {?}
 */
var _ivyEnabledInDevMode$ = new ReplaySubject(1);
/**
 * Ivy exposes helper functions to the global `window.ng` object.
 * Those functions are `getComponent, getContext,
 * getListeners, getViewComponent, getHostElement, getInjector,
 * getRootComponents, getDirectives, getDebugNode, markDirty`
 * Previously, old view engine exposed `window.ng.coreTokens` and
 * `window.ng.probe` if an application was in development/production.
 * Ivy doesn't expose these functions in production. Developers will be able
 * to see warnings in both JIT/AOT modes, but only if an application
 * is in development.
 * @return {?}
 */
export function setIvyEnabledInDevMode() {
    try {
        // `try-catch` will also handle server-side rendering, as
        // `window is not defined` will not be thrown.
        /** @type {?} */
        var ng = ((/** @type {?} */ (window))).ng;
        /** @type {?} */
        var _ivyEnabledInDevMode = !!ng && typeof ng.getComponent === 'function' && typeof ng.markDirty === 'function';
        _ivyEnabledInDevMode$.next(_ivyEnabledInDevMode);
    }
    catch (_a) {
        _ivyEnabledInDevMode$.next(false);
    }
    finally {
        _ivyEnabledInDevMode$.complete();
    }
}
/**
 * @return {?}
 */
export function ivyEnabledInDevMode() {
    return _ivyEnabledInDevMode$.asObservable();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXZ5LWVuYWJsZWQtaW4tZGV2LW1vZGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4cy9zdG9yZS8iLCJzb3VyY2VzIjpbInNyYy9pdnkvaXZ5LWVuYWJsZWQtaW4tZGV2LW1vZGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxhQUFhLEVBQWMsTUFBTSxNQUFNLENBQUM7Ozs7OztJQU0zQyxxQkFBcUIsR0FBRyxJQUFJLGFBQWEsQ0FBVSxDQUFDLENBQUM7Ozs7Ozs7Ozs7Ozs7QUFhM0QsTUFBTSxVQUFVLHNCQUFzQjtJQUNwQyxJQUFJOzs7O1lBR0ksRUFBRSxHQUFHLENBQUMsbUJBQUEsTUFBTSxFQUFPLENBQUMsQ0FBQyxFQUFFOztZQUN2QixvQkFBb0IsR0FDeEIsQ0FBQyxDQUFDLEVBQUUsSUFBSSxPQUFPLEVBQUUsQ0FBQyxZQUFZLEtBQUssVUFBVSxJQUFJLE9BQU8sRUFBRSxDQUFDLFNBQVMsS0FBSyxVQUFVO1FBQ3JGLHFCQUFxQixDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0tBQ2xEO0lBQUMsV0FBTTtRQUNOLHFCQUFxQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUNuQztZQUFTO1FBQ1IscUJBQXFCLENBQUMsUUFBUSxFQUFFLENBQUM7S0FDbEM7QUFDSCxDQUFDOzs7O0FBRUQsTUFBTSxVQUFVLG1CQUFtQjtJQUNqQyxPQUFPLHFCQUFxQixDQUFDLFlBQVksRUFBRSxDQUFDO0FBQzlDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZXBsYXlTdWJqZWN0LCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcblxyXG4vKipcclxuICogS2VlcCBpdCBhcyBhIHNpbmdsZSBgY29uc3RgIHZhcmlhYmxlIHNpbmNlIHRoaXMgYFJlcGxheVN1YmplY3RgXHJcbiAqIHdpbGwgYmUgcHJpdmF0ZSBhbmQgYWNjZXNzaWJsZSBvbmx5IHdpdGhpbiB0aGlzIGZpbGUuXHJcbiAqL1xyXG5jb25zdCBfaXZ5RW5hYmxlZEluRGV2TW9kZSQgPSBuZXcgUmVwbGF5U3ViamVjdDxib29sZWFuPigxKTtcclxuXHJcbi8qKlxyXG4gKiBJdnkgZXhwb3NlcyBoZWxwZXIgZnVuY3Rpb25zIHRvIHRoZSBnbG9iYWwgYHdpbmRvdy5uZ2Agb2JqZWN0LlxyXG4gKiBUaG9zZSBmdW5jdGlvbnMgYXJlIGBnZXRDb21wb25lbnQsIGdldENvbnRleHQsXHJcbiAqIGdldExpc3RlbmVycywgZ2V0Vmlld0NvbXBvbmVudCwgZ2V0SG9zdEVsZW1lbnQsIGdldEluamVjdG9yLFxyXG4gKiBnZXRSb290Q29tcG9uZW50cywgZ2V0RGlyZWN0aXZlcywgZ2V0RGVidWdOb2RlLCBtYXJrRGlydHlgXHJcbiAqIFByZXZpb3VzbHksIG9sZCB2aWV3IGVuZ2luZSBleHBvc2VkIGB3aW5kb3cubmcuY29yZVRva2Vuc2AgYW5kXHJcbiAqIGB3aW5kb3cubmcucHJvYmVgIGlmIGFuIGFwcGxpY2F0aW9uIHdhcyBpbiBkZXZlbG9wbWVudC9wcm9kdWN0aW9uLlxyXG4gKiBJdnkgZG9lc24ndCBleHBvc2UgdGhlc2UgZnVuY3Rpb25zIGluIHByb2R1Y3Rpb24uIERldmVsb3BlcnMgd2lsbCBiZSBhYmxlXHJcbiAqIHRvIHNlZSB3YXJuaW5ncyBpbiBib3RoIEpJVC9BT1QgbW9kZXMsIGJ1dCBvbmx5IGlmIGFuIGFwcGxpY2F0aW9uXHJcbiAqIGlzIGluIGRldmVsb3BtZW50LlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNldEl2eUVuYWJsZWRJbkRldk1vZGUoKTogdm9pZCB7XHJcbiAgdHJ5IHtcclxuICAgIC8vIGB0cnktY2F0Y2hgIHdpbGwgYWxzbyBoYW5kbGUgc2VydmVyLXNpZGUgcmVuZGVyaW5nLCBhc1xyXG4gICAgLy8gYHdpbmRvdyBpcyBub3QgZGVmaW5lZGAgd2lsbCBub3QgYmUgdGhyb3duLlxyXG4gICAgY29uc3QgbmcgPSAod2luZG93IGFzIGFueSkubmc7XHJcbiAgICBjb25zdCBfaXZ5RW5hYmxlZEluRGV2TW9kZSA9XHJcbiAgICAgICEhbmcgJiYgdHlwZW9mIG5nLmdldENvbXBvbmVudCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgbmcubWFya0RpcnR5ID09PSAnZnVuY3Rpb24nO1xyXG4gICAgX2l2eUVuYWJsZWRJbkRldk1vZGUkLm5leHQoX2l2eUVuYWJsZWRJbkRldk1vZGUpO1xyXG4gIH0gY2F0Y2gge1xyXG4gICAgX2l2eUVuYWJsZWRJbkRldk1vZGUkLm5leHQoZmFsc2UpO1xyXG4gIH0gZmluYWxseSB7XHJcbiAgICBfaXZ5RW5hYmxlZEluRGV2TW9kZSQuY29tcGxldGUoKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpdnlFbmFibGVkSW5EZXZNb2RlKCk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xyXG4gIHJldHVybiBfaXZ5RW5hYmxlZEluRGV2TW9kZSQuYXNPYnNlcnZhYmxlKCk7XHJcbn1cclxuIl19