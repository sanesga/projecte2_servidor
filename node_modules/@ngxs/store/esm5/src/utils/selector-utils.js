/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { memoize } from '@ngxs/store/internals';
import { ensureSelectorMetadata, getSelectorMetadata, getStoreMetadata, globalSelectorOptions } from '../internal/internals';
/** @type {?} */
var SELECTOR_OPTIONS_META_KEY = 'NGXS_SELECTOR_OPTIONS_META';
/** @type {?} */
export var selectorOptionsMetaAccessor = {
    getOptions: (/**
     * @param {?} target
     * @return {?}
     */
    function (target) {
        return (target && ((/** @type {?} */ (target)))[SELECTOR_OPTIONS_META_KEY]) || {};
    }),
    defineOptions: (/**
     * @param {?} target
     * @param {?} options
     * @return {?}
     */
    function (target, options) {
        if (!target)
            return;
        ((/** @type {?} */ (target)))[SELECTOR_OPTIONS_META_KEY] = options;
    })
};
/**
 * @record
 */
function CreationMetadata() { }
if (false) {
    /** @type {?} */
    CreationMetadata.prototype.containerClass;
    /** @type {?} */
    CreationMetadata.prototype.selectorName;
    /** @type {?|undefined} */
    CreationMetadata.prototype.getSelectorOptions;
}
/**
 * @record
 */
function RuntimeSelectorInfo() { }
if (false) {
    /** @type {?} */
    RuntimeSelectorInfo.prototype.selectorOptions;
    /** @type {?} */
    RuntimeSelectorInfo.prototype.argumentSelectorFunctions;
}
/**
 * Function for creating a selector
 * @template T
 * @param {?} selectors The selectors to use to create the arguments of this function
 * @param {?} originalFn The original function being made into a selector
 * @param {?=} creationMetadata
 * @return {?}
 */
export function createSelector(selectors, originalFn, creationMetadata) {
    /** @type {?} */
    var containerClass = creationMetadata && creationMetadata.containerClass;
    /** @type {?} */
    var wrappedFn = (/** @type {?} */ ((/**
     * @param {...?} args
     * @return {?}
     */
    function wrappedSelectorFn() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        /** @type {?} */
        var returnValue = originalFn.apply(containerClass, args);
        if (returnValue instanceof Function) {
            /** @type {?} */
            var innerMemoizedFn = memoize.apply(null, [returnValue]);
            return innerMemoizedFn;
        }
        return returnValue;
    })));
    /** @type {?} */
    var memoizedFn = memoize(wrappedFn);
    /** @type {?} */
    var selectorMetaData = setupSelectorMetadata(memoizedFn, originalFn, creationMetadata);
    /** @type {?} */
    var runtimeInfo;
    /** @type {?} */
    var selectFromAppState = (/**
     * @param {?} state
     * @return {?}
     */
    function (state) {
        /** @type {?} */
        var results = [];
        runtimeInfo = runtimeInfo || getRuntimeSelectorInfo(selectorMetaData, selectors);
        var suppressErrors = runtimeInfo.selectorOptions.suppressErrors;
        var argumentSelectorFunctions = runtimeInfo.argumentSelectorFunctions;
        // Determine arguments from the app state using the selectors
        results.push.apply(results, tslib_1.__spread(argumentSelectorFunctions.map((/**
         * @param {?} argFn
         * @return {?}
         */
        function (argFn) { return argFn(state); }))));
        // if the lambda tries to access a something on the
        // state that doesn't exist, it will throw a TypeError.
        // since this is quite usual behaviour, we simply return undefined if so.
        try {
            return memoizedFn.apply(void 0, tslib_1.__spread(results));
        }
        catch (ex) {
            if (ex instanceof TypeError && suppressErrors) {
                return undefined;
            }
            throw ex;
        }
    });
    selectorMetaData.selectFromAppState = selectFromAppState;
    return memoizedFn;
}
/**
 * @template T
 * @param {?} memoizedFn
 * @param {?} originalFn
 * @param {?} creationMetadata
 * @return {?}
 */
function setupSelectorMetadata(memoizedFn, originalFn, creationMetadata) {
    /** @type {?} */
    var selectorMetaData = ensureSelectorMetadata(memoizedFn);
    selectorMetaData.originalFn = originalFn;
    /** @type {?} */
    var getExplicitSelectorOptions = (/**
     * @return {?}
     */
    function () { return ({}); });
    if (creationMetadata) {
        selectorMetaData.containerClass = creationMetadata.containerClass;
        selectorMetaData.selectorName = creationMetadata.selectorName;
        getExplicitSelectorOptions =
            creationMetadata.getSelectorOptions || getExplicitSelectorOptions;
    }
    /** @type {?} */
    var selectorMetaDataClone = tslib_1.__assign({}, selectorMetaData);
    selectorMetaData.getSelectorOptions = (/**
     * @return {?}
     */
    function () {
        return getCustomSelectorOptions(selectorMetaDataClone, getExplicitSelectorOptions());
    });
    return selectorMetaData;
}
/**
 * @param {?} selectorMetaData
 * @param {?=} selectors
 * @return {?}
 */
function getRuntimeSelectorInfo(selectorMetaData, selectors) {
    if (selectors === void 0) { selectors = []; }
    /** @type {?} */
    var selectorOptions = selectorMetaData.getSelectorOptions();
    /** @type {?} */
    var selectorsToApply = getSelectorsToApply(selectorMetaData, selectors);
    /** @type {?} */
    var argumentSelectorFunctions = selectorsToApply.map((/**
     * @param {?} selector
     * @return {?}
     */
    function (selector) { return getSelectorFn(selector); }));
    return {
        selectorOptions: selectorOptions,
        argumentSelectorFunctions: argumentSelectorFunctions
    };
}
/**
 * @param {?} selectorMetaData
 * @param {?} explicitOptions
 * @return {?}
 */
function getCustomSelectorOptions(selectorMetaData, explicitOptions) {
    /** @type {?} */
    var selectorOptions = tslib_1.__assign({}, globalSelectorOptions.get(), (selectorOptionsMetaAccessor.getOptions(selectorMetaData.containerClass) || {}), (selectorOptionsMetaAccessor.getOptions(selectorMetaData.originalFn) || {}), (selectorMetaData.getSelectorOptions() || {}), explicitOptions);
    return selectorOptions;
}
/**
 * @param {?} selectorMetaData
 * @param {?=} selectors
 * @return {?}
 */
function getSelectorsToApply(selectorMetaData, selectors) {
    if (selectors === void 0) { selectors = []; }
    /** @type {?} */
    var selectorsToApply = [];
    /** @type {?} */
    var canInjectContainerState = selectors.length === 0 || selectorMetaData.getSelectorOptions().injectContainerState;
    /** @type {?} */
    var containerClass = selectorMetaData.containerClass;
    if (containerClass && canInjectContainerState) {
        // If we are on a state class, add it as the first selector parameter
        /** @type {?} */
        var metadata = getStoreMetadata(containerClass);
        if (metadata) {
            selectorsToApply.push(containerClass);
        }
    }
    if (selectors) {
        selectorsToApply.push.apply(selectorsToApply, tslib_1.__spread(selectors));
    }
    return selectorsToApply;
}
/**
 * This function gets the selector function to be used to get the selected slice from the app state
 * @ignore
 * @param {?} selector
 * @return {?}
 */
export function getSelectorFn(selector) {
    /** @type {?} */
    var metadata = getSelectorMetadata(selector) || getStoreMetadata(selector);
    return (metadata && metadata.selectFromAppState) || selector;
}
//# sourceMappingURL=data:application/json;base64,