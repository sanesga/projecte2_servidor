{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@ngxs/store/src/configs/messages.config.ts","ng://@ngxs/store/src/execution/dispatch-outside-zone-ngxs-execution-strategy.ts","ng://@ngxs/store/src/symbols.ts","ng://@ngxs/store/src/execution/symbols.ts","ng://@ngxs/store/src/utils/utils.ts","ng://@ngxs/store/src/internal/internals.ts","ng://@ngxs/store/src/operators/of-action.ts","ng://@ngxs/store/src/operators/leave-ngxs.ts","ng://@ngxs/store/src/execution/internal-ngxs-execution-strategy.ts","ng://@ngxs/store/src/actions-stream.ts","ng://@ngxs/store/src/utils/compose.ts","ng://@ngxs/store/src/internal/state-stream.ts","ng://@ngxs/store/src/plugin-manager.ts","ng://@ngxs/store/src/internal/dispatcher.ts","ng://@ngxs/store/src/utils/freeze.ts","ng://@ngxs/store/src/host-environment/host-environment.ts","ng://@ngxs/store/src/internal/config-validator.ts","ng://@ngxs/store/src/internal/state-operations.ts","ng://@ngxs/store/src/internal/state-context-factory.ts","ng://@ngxs/store/src/internal/state-operators.ts","ng://@ngxs/store/src/utils/store-validators.ts","ng://@ngxs/store/src/internal/state-factory.ts","ng://@ngxs/store/src/internal/lifecycle-state-manager.ts","ng://@ngxs/store/src/utils/selector-utils.ts","ng://@ngxs/store/src/store.ts","ng://@ngxs/store/src/decorators/select/select-factory.ts","ng://@ngxs/store/src/actions/actions.ts","ng://@ngxs/store/src/ivy/ivy-enabled-in-dev-mode.ts","ng://@ngxs/store/src/modules/ngxs-root.module.ts","ng://@ngxs/store/src/modules/ngxs-feature.module.ts","ng://@ngxs/store/src/module.ts","ng://@ngxs/store/src/ivy/ensure-state-class-is-injectable.ts","ng://@ngxs/store/src/decorators/select/symbols.ts","ng://@ngxs/store/src/execution/noop-ngxs-execution-strategy.ts","ng://@ngxs/store/src/state-token/state-token.ts","ng://@ngxs/store/src/decorators/action.ts","ng://@ngxs/store/src/decorators/select/select.ts","ng://@ngxs/store/src/decorators/selector/selector.ts","ng://@ngxs/store/src/decorators/selector-options.ts","ng://@ngxs/store/src/decorators/state.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__values","o","m","Symbol","iterator","next","value","done","__read","r","e","ar","push","error","__spread","concat","STATE_NAME","STATE_UNIQUE","STATE_NAME_PROPERTY","STATE_DECORATOR","INCORRECT_PRODUCTION","INCORRECT_DEVELOPMENT","SELECT_FACTORY_NOT_CONNECTED","ACTION_DECORATOR","SELECTOR_DECORATOR","ZONE_WARNING","PATCHING_ARRAY","PATCHING_PRIMITIVE","UNDECORATED_STATE_IN_IVY","CONFIG_MESSAGES","_a","VALIDATION_CODE","name","current","newName","oldName","DispatchOutsideZoneNgxsExecutionStrategy","_ngZone","_platformId","verifyZoneIsNotNooped","enter","func","isPlatformServer","runInsideAngular","runOutsideAngular","leave","NgZone","isInAngularZone","run","ngZone","console","warn","Injectable","Inject","args","PLATFORM_ID","ROOT_STATE_TOKEN","InjectionToken","FEATURE_STATE_TOKEN","NGXS_PLUGINS","NG_TEST_MODE","NG_DEV_MODE","META_KEY","META_OPTIONS_KEY","SELECTOR_META_KEY","NgxsConfig","defaultsState","selectorOptions","injectContainerState","suppressErrors","compatibility","strictContentSecurityPolicy","executionStrategy","previousValue","currentValue","firstChange","NGXS_EXECUTION_STRATEGY","getActionTypeFromInstance","action","type","setValue","obj","prop","val","split","lastIndex","reduce","acc","part","index","isArray","slice","getValue","ensureStoreMetadata","target","defineProperty","actions","defaults","path","selectFromAppState","children","getStoreMetadata","_globalSelectorOptions","globalSelectorOptions","asReadonly","get","set","ensureSelectorMetadata","originalFn","containerClass","selectorName","getSelectorOptions","getSelectorMetadata","propGetter","paths","config","copyOfPaths","compliantPropGetter","segments","seg","l","expr","Function","fastPropGetter","getStateDiffChanges","mappedStore","diff","currentAppState","depth","newAppState","NgxsSimpleChange","isInitialised","ofActionDispatched","allowedTypes","_i","ofActionOperator","statuses","mapOperator","mapAction","allowedMap","filterMap","klass","allowedStatusMap","status","createAllowedStatusesMap","pipe","allowedStatuses","filter","ctx","actionType","typeMatch","statusMatch","filterStatus","mapActionResult","map","result","successful","canceled","leaveNgxs","ngxsExecutionStrategy","source","Observable","sink","subscribe","complete","InternalNgxsExecutionStrategy","_executionStrategy","OrderedSubject","_this","_super","_itemQueue","_busyPushingNext","tslib_1.__extends","unshift","nextValue","pop","Subject","InternalActions","Actions","internalActions$","internalExecutionStrategy","observer","childSubscription","add","compose","funcs","curr","shift","nextArgs","StateStream","BehaviorSubject","PluginManager","_parentManager","_pluginHandlers","plugins","registerHandlers","pluginHandlers","getPluginHandlers","rootPlugins","plugin","handle","bind","decorators","Optional","SkipSelf","InternalDispatchedActionResults","InternalDispatcher","_errorHandler","_actions","_actionResults","_pluginManager","_stateStream","_ngxsExecutionStrategy","dispatch","actionOrActions","dispatchByEvents","handleError","forkJoin","a","dispatchSingle","prevState","nextState","nextAction","actionResult$","getActionResultStream","createDispatchObservable","shareReplay","take","exhaustMap","of","throwError","EMPTY","ErrorHandler","deepFreeze","freeze","oIsFunction","hasOwnProp","getOwnPropertyNames","forEach","isFrozen","HostEnvironment","isDevMode","isTestMode","ConfigValidator","_host","_config","developmentMode","verifyDevMode","isIncorrectProduction","MESSAGES","CODE","isIncorrectDevelopment","InternalStateOperations","_dispatcher","configValidator","getRootStateOperations","rootStateOperations","getState","setState","newState","ensureStateAndActionsAreImmutable","root","frozenValue","setStateToTheCurrentWithNew","results","stateOperations","currentState","StateContextFactory","_internalStateOperations","createStateContext","setStateValue","newValue","instance","ngxsOnChanges","change","setStateFromOperator","stateOperator","patchState","existingState","Error","key","simplePatch","StoreValidators","stateNameErrorMessage","checkCorrectStateName","stateNameRegex","test","checkStateNameIsUnique","state","statesByName","stateName","getValidStateMeta","meta","RegExp","StateFactory","_injector","_parentFactory","_stateContextFactory","_initialState","_connected","_states","_statesByName","states","cloneDefaults","undefined","checkStatesAreValid","stateClasses","newStates","addToStatesMap","graph","sorted","visited","visit","stateGraph","findName","stateClass","find","g","buildGraph","sortedStates","ancestors","dep","indexOf","join","keys","k","reverse","depths","newObj","child","keyToFind","parent_1","parent_2","findFullParentPath","nameGraph","bootstrappedStores","sortedStates_1","tslib_1.__values","sortedStates_1_1","name_1","addRuntimeInfoToMeta","stateMap","hasBeenMountedAndBootstrapped","addAndReturnDefaults","classes","mappedStores","connectActionHandlers","mergeMap","invokeActions","defaultIfEmpty","catchError","actions$","_c","_d","metadata","actionMetas","actionMetas_1","actionMetas_1_1","actionMeta","stateContext","fn","Promise","from","options","cancelUncompleted","takeUntil","statesMap","stateClasses_1","stateClasses_1_1","valueIsBootstrappedInInitialState","Injector","INITIAL_STATE_TOKEN","LifecycleStateManager","internalStateOperations","stateContextFactory","bootstrapper","ngxsBootstrap","tap","invokeInit","appBootstrapped$","appBootstrapped","invokeBootstrap","mappedStores_1","mappedStores_1_1","firstDiffChange","ngxsOnInit","getStateContext","mappedStores_2","mappedStores_2_1","ngxsAfterBootstrap","NgxsBootstrapper","selectorOptionsMetaAccessor","getOptions","defineOptions","createSelector","selectors","creationMetadata","runtimeInfo","memoizedFn","memoize","returnValue","innerMemoizedFn","selectorMetaData","getExplicitSelectorOptions","selectorMetaDataClone","explicitOptions","getCustomSelectorOptions","setupSelectorMetadata","argumentSelectorFunctions","selectorsToApply","canInjectContainerState","getSelectorsToApply","selector","getSelectorFn","getRuntimeSelectorInfo","argFn","ex","TypeError","Store","_internalExecutionStrategy","initialStateValue","initStateStream","event","select","selectorFn","err","distinctUntilChanged","selectOnce","selectSnapshot","snapshot","reset","storeValues","SelectFactory","store","InitState","UpdateState","addedStates","_ivyEnabledInDevMode$","ReplaySubject","NgxsRootModule","factory","_store","_select","lifecycleStateManager","ng","_ivyEnabledInDevMode","getComponent","markDirty","setIvyEnabledInDevMode","NgModule","NgxsFeatureModule","flattenedStates","flattenStates","total","values","NgxsModule","forRoot","ngModule","providers","ngxsTokenProviders","forFeature","provide","multi","useValue","isAngularInTestMode","useClass","ROOT_OPTIONS","useFactory","ngxsConfigFactory","deps","APP_BOOTSTRAP_LISTENER","appBootstrapListenerFactory","getInitialState","NGXS_STATE_CONTEXT_FACTORY","useExisting","NGXS_STATE_FACTORY","bootstrap","InitialState","ensureStateClassIsInjectable","asObservable","Éµprov","DOLLAR_CHAR_CODE","createSelectorFn","rawSelector","lastCharIndex","charCodeAt","removeDollarAtTheEnd","NoopNgxsExecutionStrategy","StateToken","selectorMetadata","getter","getName","toString","actions_1","actions_1_1","selectorId","defineProperties","writable","enumerable","configurable","createSelectObservable","descriptor","newDescriptor","methodName","inheritedStateClass","getPrototypeOf","optionsWithInheritance","inheritanceOptions","getStateOptions","params","inheritedMeta","mutateMetaData","action1","type1","action2"],"mappings":";;;;;;;;;;;;;;oFAgBA,IAAIA,EAAgB,SAASC,EAAGC,GAI5B,OAHAF,EAAgBG,OAAOC,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUL,EAAGC,GAAKD,EAAEI,UAAYH,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAIK,KAAKL,EAAOA,EAAEM,eAAeD,KAAIN,EAAEM,GAAKL,EAAEK,MACpDN,EAAGC,IAGrB,SAASO,EAAUR,EAAGC,GAEzB,SAASQ,IAAOC,KAAKC,YAAcX,EADnCD,EAAcC,EAAGC,GAEjBD,EAAEY,UAAkB,OAANX,EAAaC,OAAOW,OAAOZ,IAAMQ,EAAGG,UAAYX,EAAEW,UAAW,IAAIH,GAG5E,MAAIK,EAAW,WAQlB,OAPAA,EAAWZ,OAAOa,QAAU,SAAkBC,GAC1C,IAAK,IAAIC,EAAGC,EAAI,EAAGC,EAAIC,UAAUC,OAAQH,EAAIC,EAAGD,IAE5C,IAAK,IAAIZ,KADTW,EAAIG,UAAUF,GACOhB,OAAOU,UAAUL,eAAee,KAAKL,EAAGX,KAAIU,EAAEV,GAAKW,EAAEX,IAE9E,OAAOU,IAEKO,MAAMb,KAAMU,YAuEzB,SAASI,EAASC,GACrB,IAAIC,EAAsB,mBAAXC,QAAyBF,EAAEE,OAAOC,UAAWV,EAAI,EAChE,OAAIQ,EAAUA,EAAEJ,KAAKG,GACd,CACHI,KAAM,WAEF,OADIJ,GAAKP,GAAKO,EAAEJ,SAAQI,OAAI,GACrB,CAAEK,MAAOL,GAAKA,EAAEP,KAAMa,MAAON,KAKzC,SAASO,EAAOP,EAAGN,GACtB,IAAIO,EAAsB,mBAAXC,QAAyBF,EAAEE,OAAOC,UACjD,IAAKF,EAAG,OAAOD,EACf,IAAmBQ,EAAYC,EAA3BhB,EAAIQ,EAAEJ,KAAKG,GAAOU,EAAK,GAC3B,IACI,WAAc,IAANhB,GAAgBA,KAAM,MAAQc,EAAIf,EAAEW,QAAQE,MAAMI,EAAGC,KAAKH,EAAEH,OAExE,MAAOO,GAASH,EAAI,CAAEG,MAAOA,GACjC,QACQ,IACQJ,IAAMA,EAAEF,OAASL,EAAIR,EAAU,SAAIQ,EAAEJ,KAAKJ,GAE1D,QAAkB,GAAIgB,EAAG,MAAMA,EAAEG,OAE7B,OAAOF,EAGJ,SAASG,IACZ,IAAK,IAAIH,EAAK,GAAIjB,EAAI,EAAGA,EAAIE,UAAUC,OAAQH,IAC3CiB,EAAKA,EAAGI,OAAOP,EAAOZ,UAAUF,KACpC,OAAOiB,SC1ITK,WAAa,aACbC,aAAe,eACfC,oBAAsB,sBACtBC,gBAAkB,kBAClBC,qBAAuB,uBACvBC,sBAAwB,wBACxBC,6BAA+B,+BAC/BC,iBAAmB,mBACnBC,mBAAqB,qBACrBC,aAAe,eACfC,eAAiB,iBACjBC,mBAAqB,qBACrBC,yBAA2B,4BAGhBC,IAAeC,EAAA,IACzBC,EAAgBf,YAAU,SAAIgB,GAC7B,OAAGA,EAAI,4EACTF,EAACC,EAAgBb,qBAAmB,WAAS,MAAA,0CAC7CY,EAACC,EAAgBd,cAAY,SAAIgB,EAAiBC,EAAiBC,GACjE,MAAA,eAAeF,EAAO,UAAUC,EAAO,sBAAsBC,GAC/DL,EAACC,EAAgBZ,iBAAe,WAAS,MAAA,oDACzCW,EAACC,EAAgBX,sBAAoB,WACnC,MAAA,8PAGFU,EAACC,EAAgBV,uBAAqB,WACpC,MAAA,wLAEFS,EAACC,EAAgBT,8BAA4B,WAC3C,MAAA,iDACFQ,EAACC,EAAgBR,kBAAgB,WAC/B,MAAA,0DACFO,EAACC,EAAgBP,oBAAkB,WAAS,MAAA,kCAC5CM,EAACC,EAAgBN,cAAY,WAC3B,MAAA,iRAGFK,EAACC,EAAgBL,gBAAc,WAAS,MAAA,qCACxCI,EAACC,EAAgBJ,oBAAkB,WAAS,MAAA,yCAC5CG,EAACC,EAAgBH,0BAAwB,SAAII,GAC3C,MAAA,IAAIA,EAAI,wFC1CZI,EAAA,WAQE,SAAAA,EAAoBC,EAA8CC,GAA9CpD,KAAAmD,QAAAA,EAA8CnD,KAAAoD,YAAAA,EAChEpD,KAAKqD,sBAAsBrD,KAAKmD,SAsCpC,OAnCED,EAAAhD,UAAAoD,MAAA,SAASC,GACP,OAAIC,EAAAA,iBAAiBxD,KAAKoD,aACjBpD,KAAKyD,iBAAiBF,GAExBvD,KAAK0D,kBAAkBH,IAGhCL,EAAAhD,UAAAyD,MAAA,SAASJ,GACP,OAAOvD,KAAKyD,iBAAiBF,IAGvBL,EAAAhD,UAAAuD,iBAAR,SAA4BF,GAC1B,OAAIK,EAAAA,OAAOC,kBACFN,IAEFvD,KAAKmD,QAAQW,IAAIP,IAGlBL,EAAAhD,UAAAwD,kBAAR,SAA6BH,GAC3B,OAAIK,EAAAA,OAAOC,kBACF7D,KAAKmD,QAAQO,kBAAkBH,GAEjCA,KAGDL,EAAAhD,UAAAmD,sBAAR,SAA8BU,GAIxBA,aAAkBH,EAAAA,QAItBI,QAAQC,KAAKtB,EAAgBE,EAAgBN,sCAvChD2B,EAAAA,sDAN4BN,EAAAA,uCAQWO,EAAAA,OAAMC,KAAA,CAACC,EAAAA,kBAuC/CnB,EA/CA,GCSA,IAAaoB,EAAmB,IAAIC,EAAAA,eAAoB,oBAC3CC,EAAsB,IAAID,EAAAA,eAAoB,uBAC9CE,EAAe,IAAIF,EAAAA,eAAe,gBAClCG,EAAe,IAAIH,EAAAA,eAAkC,gBACrDI,EAAc,IAAIJ,EAAAA,eAAkC,eAEpDK,EAAW,YACXC,EAAmB,oBACnBC,EAAoB,qBAWjCC,EAAA,WA2CE,SAAAA,IATA/E,KAAAgF,cAA6B,GAI7BhF,KAAAiF,gBAAyC,CACvCC,sBAAsB,EACtBC,gBAAgB,GAIhBnF,KAAKoF,cAAgB,CACnBC,6BAA6B,GAE/BrF,KAAKsF,kBAAoBpC,EAE7B,2BAjDCgB,EAAAA,mDAiDDa,EAjDA,GAkHA,MACE,SACkBQ,EACAC,EACAC,GAFAzF,KAAAuF,cAAAA,EACAvF,KAAAwF,aAAAA,EACAxF,KAAAyF,YAAAA,GC7IpB,IAAaC,EAA0B,IAAInB,EAAAA,eACzC,2BCFF,SAAgBoB,EAA0BC,GACxC,OAAIA,EAAO3F,aAAe2F,EAAO3F,YAAY4F,KACpCD,EAAO3F,YAAY4F,KAGrBD,EAAOC,KAyBhB,IAAaC,EAAQ,SAAIC,EAAUC,EAAcC,GAC/CF,EAAG3F,EAAA,GAAQ2F,OAELG,EAAQF,EAAKE,MAAM,KACnBC,EAAYD,EAAMvF,OAAS,EAYjC,OAVAuF,EAAME,QAAM,SAAEC,EAAKC,EAAMC,GAOvB,OALEF,EAAIC,GADFC,IAAUJ,EACAF,EAEAtG,MAAM6G,QAAQH,EAAIC,IAASD,EAAIC,GAAMG,QAAOrG,EAAA,GAAQiG,EAAIC,IAG/DD,GAAOA,EAAIC,KACjBP,GAEIA,GAUIW,EAAQ,SAAIX,EAAUC,GACjC,OAAAA,EAAKE,MAAM,KAAKE,QAAM,SAAEC,EAAUC,GAAiB,OAAAD,GAAOA,EAAIC,KAAOP,ICwBvE,SAAgBY,EAAoBC,GAClC,IAAKA,EAAO/G,eAAe+E,GAAW,CAUpCpF,OAAOqH,eAAeD,EAAQhC,EAAU,CAAExD,MATH,CACrC0B,KAAM,KACNgE,QAAS,GACTC,SAAU,GACVC,KAAM,KACNC,mBAAoB,KACpBC,SAAU,MAKd,OAAOC,EAAiBP,GAQ1B,SAAgBO,EAAiBP,GAC/B,OAAOA,EAAOhC,OAIZwC,EAAgD,GAEvCC,EAnGb,SAAuBjG,GACrB,OAAOA,EAkG4BkG,CAAW,CAC9CC,IAAA,WACE,OAAOH,GAETI,aAAIpG,GACFgG,EAAsBhH,EAAA,GAAQgB,MASlC,SAAgBqG,EAAuBb,GACrC,IAAKA,EAAO/G,eAAeiF,GAAoB,CAS7CtF,OAAOqH,eAAeD,EAAQ9B,EAAmB,CAAE1D,MARJ,CAC7C6F,mBAAoB,KACpBS,WAAY,KACZC,eAAgB,KAChBC,aAAc,KACdC,mBAAkB,WAAQ,MAAA,OAM9B,OAAOC,EAAoBlB,GAQ7B,SAAgBkB,EAAoBlB,GAClC,OAAOA,EAAO9B,GAgDhB,SAAgBiD,EAAWC,EAAiBC,GAC1C,OAAIA,GAAUA,EAAO7C,eAAiB6C,EAAO7C,cAAcC,4BApC7D,SAA6B2C,OACrBE,EAAcF,EAAMvB,QAC1B,OAAA,SAAOV,GAAO,OAAAmC,EAAY9B,QAAM,SAAEC,EAAUC,GAAiB,OAAAD,GAAOA,EAAIC,KAAOP,KAmCtEoC,CAAoBH,GAzB/B,SAAwBA,GAOtB,QANMI,EAAWJ,EACbK,EAAM,SAAWD,EAAS,GAC1B5H,EAAI,EACF8H,EAAIF,EAASzH,OAEf4H,EAAOF,IACF7H,EAAI8H,GACXC,EAAOA,EAAO,QAAUF,EAAMA,EAAM,IAAMD,EAAS5H,IAKrD,OAFW,IAAIgI,SAAS,QAAS,UAAYD,EAAO,KAgB3CE,CAAeT,GA6K1B,SAAgBU,EACdC,EACAC,OAEMrD,EAAmBmB,EAASkC,EAAKC,gBAAiBF,EAAYG,OAC9DtD,EAAkBkB,EAASkC,EAAKG,YAAaJ,EAAYG,OAC/D,OAAO,IAAIE,EAAiBzD,EAAeC,GAAemD,EAAYM,eC7VxE,SAAgBC,QAAmB,IAAAC,EAAA,GAAAC,EAAA,EAAAA,EAAA1I,UAAAC,OAAAyI,IAAAD,EAAAC,GAAA1I,UAAA0I,GACjC,OAAOC,EAAiBF,EAAc,CAAA,eA4CxC,SAASE,EACPF,EACAG,EACAC,QAAA,IAAAA,IAAAA,EAAAC,OAEMC,EAAyCN,EAyClC/C,QAAM,SAChBsD,EAAsBC,GAErB,OADAD,EAAU/D,EAA0BgE,KAAW,EACxCD,IACR,IA5CGE,EAAmBN,GAiD3B,SAAkCA,GAChC,OAAOA,EAASlD,QAAM,SACnBsD,EAAsBG,GAErB,OADAH,EAAUG,IAAU,EACbH,IACR,IAtDkCI,CAAyBR,GAC9D,OAAA,SAAgBvI,GACd,OAAOA,EAAEgJ,KAOb,SAAsBZ,EAAyBa,GAC7C,OAAOC,EAAAA,QAAM,SAAEC,OACPC,EAAaxE,EAA0BuE,EAAItE,QAC3CwE,EAAYjB,EAAagB,GACzBE,GAAcL,GAAkBA,EAAgBE,EAAIL,QAC1D,OAAOO,GAAaC,KAXlBC,CAAab,EAAYG,GACzBL,MAcN,SAASgB,IACP,OAAOC,EAAAA,KAAG,SAAE5H,OAAEgD,EAAAhD,EAAAgD,OAAQiE,EAAAjH,EAAAiH,OACpB,OAAA,CACEjE,OAAMA,EACN6E,OAAQ,CACNC,WAAY,eAA4Bb,EACxCc,SAAU,aAA0Bd,EACpClI,MANwBiB,EAAAjB,YAYhC,SAAS6H,IACP,OAAOgB,EAAAA,KAAG,SAAEN,GAAkB,OAAQA,EAAU,UC3GlD,SAAgBU,EACdC,GAEA,OAAA,SAAQC,GACN,OAAO,IAAIC,EAAAA,YAAU,SAAEC,GACrB,OAAOF,EAAOG,UAAU,CACtB9J,cAAKC,GACHyJ,EAAsBlH,OAAK,WAAO,OAAAqH,EAAK7J,KAAKC,OAE9CO,eAAMA,GACJkJ,EAAsBlH,OAAK,WAAO,OAAAqH,EAAKrJ,MAAMA,OAE/CuJ,oBACEL,EAAsBlH,OAAK,WAAO,OAAAqH,EAAKE,qBCpBjD,IAAAC,EAAA,WAME,SAAAA,EAC2CC,GAAApL,KAAAoL,mBAAAA,EAU7C,OAPED,EAAAjL,UAAAoD,MAAA,SAASC,GACP,OAAOvD,KAAKoL,mBAAmB9H,MAAMC,IAGvC4H,EAAAjL,UAAAyD,MAAA,SAASJ,GACP,OAAOvD,KAAKoL,mBAAmBzH,MAAMJ,wBAXxCW,EAAAA,+EAGIC,EAAAA,OAAMC,KAAA,CAACsB,QAUZyF,EAjBA,GCqCA,kBAAA,SAAAE,IAAA,IAAAC,EAAA,OAAAC,GAAAA,EAAA1K,MAAAb,KAAAU,YAAAV,YACUsL,EAAAE,WAAkB,GAClBF,EAAAG,kBAAmB,IAe7B,OAjBuCC,EAAAA,EAAAA,GAIrCL,EAAAnL,UAAAiB,KAAA,SAAKC,GACH,GAAIpB,KAAKyL,iBACPzL,KAAKwL,WAAWG,QAAO,OADzB,CAMA,IAFA3L,KAAKyL,kBAAmB,EACxBF,EAAArL,UAAMiB,KAAIP,KAAAZ,KAACoB,GACJpB,KAAKwL,WAAW7K,OAAS,GAAG,KAC3BiL,EAAY5L,KAAKwL,WAAWK,MAClCN,EAAArL,UAAMiB,KAAIP,KAAAZ,KAAC4L,GAEb5L,KAAKyL,kBAAmB,IAE5BJ,GAjBuCS,EAAAA,SAsBvC,IAAAC,EAAA,SAAAR,GAAA,SAAAQ,mDACoE,OAA/BL,EAAAA,EAAAA,uBADpCxH,EAAAA,aACmE6H,EADpE,CACqCV,GAOrCW,EAAA,SAAAT,GAIE,SAAAS,EACEC,EACAC,UAEAX,EAAA3K,KAAAZ,MAAA,SAAMmM,OACEC,EAAoBH,EACvBlC,KAAKa,EAAUsB,IACfjB,UAAU,CACT9J,KAAI,SAAE+I,GAAO,OAAAiC,EAAShL,KAAK+I,IAC3BvI,MAAK,SAAEA,GAAS,OAAAwK,EAASxK,MAAMA,IAC/BuJ,SAAQ,WAAQ,OAAAiB,EAASjB,cAG7BiB,EAASE,IAAID,OACbpM,KAEN,OAnB6B0L,EAAAA,EAAAA,uBAD5BxH,EAAAA,sDAKqB6H,SApEbZ,KAmFTa,EApBA,CAC6BjB,EAAAA,YC7ChBuB,EAAO,SAAIC,GAAgB,OAAA,eAAM,IAAAnI,EAAA,GAAAgF,EAAA,EAAAA,EAAA1I,UAAAC,OAAAyI,IAAAhF,EAAAgF,GAAA1I,UAAA0I,OACtCoD,EAAOD,EAAME,QACnB,OAAOD,EAAI3L,WAAA,EAAAe,EAAIwC,EAAI,CAAA,eAAG,IAAAsI,EAAA,GAAAtD,EAAA,EAAAA,EAAA1I,UAAAC,OAAAyI,IAAAsD,EAAAtD,GAAA1I,UAAA0I,GAAuB,OAAAkD,EAAQC,GAAM1L,WAAA,EAAAe,EAAI8K,UChBjEC,EAAA,SAAApB,GAEE,SAAAoB,WACEpB,EAAA3K,KAAAZ,KAAM,KAAGA,KAEb,OAJiC0L,EAAAA,EAAAA,uBADhCxH,EAAAA,mDAKDyI,EALA,CACiCC,EAAAA,8BCH/B,SAAAC,EAGUC,EAGAC,GAHA/M,KAAA8M,eAAAA,EAGA9M,KAAA+M,gBAAAA,EARH/M,KAAAgN,QAA0B,GAU/BhN,KAAKiN,mBAmBT,OAhBEzN,OAAAqH,eAAYgG,EAAA3M,UAAA,cAAW,KAAvB,WACE,OAAQF,KAAK8M,gBAAkB9M,KAAK8M,eAAeE,SAAYhN,KAAKgN,yCAG9DH,EAAA3M,UAAA+M,iBAAR,iBACQC,EAAiClN,KAAKmN,qBAC5CvK,EAAA5C,KAAKoN,aAAY1L,KAAIb,MAAA+B,EAAAhB,EAAIsL,KAGnBL,EAAA3M,UAAAiN,kBAAR,WAEE,OAD+BnN,KAAK+M,iBAAmB,IACvCvC,KAAG,SAChB6C,GAAkB,OAChBA,EAAOC,OAASD,EAAOC,OAAOC,KAAKF,GAAUA,0BA5BrDnJ,EAAAA,sDAO2B2I,EAAaW,WAAA,CAAA,CAAA3H,KAFpC4H,EAAAA,UAAQ,CAAA5H,KACR6H,EAAAA,0CAEAvJ,EAAAA,OAAMC,KAAA,CAACK,IAAY,CAAAoB,KACnB4H,EAAAA,cAsBLZ,KCjBA,IAAAc,EAAA,SAAApC,GAAA,SAAAoC,mDAC6E,OAAxBjC,EAAAA,EAAAA,uBADpDxH,EAAAA,aAC4EyJ,EAD7E,CACqD7B,EAAAA,sBAInD,SAAA8B,EACUC,EACAC,EACAC,EACAC,EACAC,EACAC,GALAlO,KAAA6N,cAAAA,EACA7N,KAAA8N,SAAAA,EACA9N,KAAA+N,eAAAA,EACA/N,KAAAgO,eAAAA,EACAhO,KAAAiO,aAAAA,EACAjO,KAAAkO,uBAAAA,EA2EZ,OArEEN,EAAA1N,UAAAiO,SAAA,SAASC,GAAT,IAAA9C,EAAAtL,KACQyK,EAASzK,KAAKkO,uBAAuB5K,OAAK,WAC9C,OAAAgI,EAAK+C,iBAAiBD,MAYxB,OATA3D,EAAOQ,UAAU,CACftJ,MAAK,SAAEA,GACL,OAAA2J,EAAK4C,uBAAuBvK,OAAK,WAC/B,IACE2H,EAAKuC,cAAcS,YAAY3M,GAC/B,MAAAiB,WAID6H,EAAOV,KAAKa,EAAU5K,KAAKkO,0BAG5BN,EAAA1N,UAAAmO,iBAAR,SAAyBD,GAAzB,IAAA9C,EAAAtL,KACE,OAAIL,MAAM6G,QAAQ4H,GACTG,EAAAA,SAASH,EAAgB5D,KAAG,SAACgE,GAAK,OAAAlD,EAAKmD,eAAeD,OAEtDxO,KAAKyO,eAAeL,IAIvBR,EAAA1N,UAAAuO,eAAR,SAAuB7I,GAAvB,IAAA0F,EAAAtL,KACQ0O,EAAY1O,KAAKiO,aAAavH,WAC9BsG,EAAUhN,KAAKgO,eAAehB,QAEpC,OAAQV,EAAO1K,EACVoL,EAAO,UACT2B,EAAgBC,GACXD,IAAcD,GAChBpD,EAAK2C,aAAa9M,KAAKwN,OAEnBE,EAAgBvD,EAAKwD,sBAAsBF,GAGjD,OAFAC,EAAc5D,WAAS,SAACf,GAAO,OAAAoB,EAAKwC,SAAS3M,KAAK+I,MAClDoB,EAAKwC,SAAS3M,KAAK,CAAEyE,OAAQgJ,EAAY/E,OAAM,eACxCyB,EAAKyD,yBAAyBF,MATlC,CAWJH,EAAW9I,GAA4BmE,KAAKiF,EAAAA,gBAGzCpB,EAAA1N,UAAA4O,sBAAR,SAA8BlJ,GAC5B,OAAO5F,KAAK+N,eAAehE,KACzBE,EAAAA,QAAM,SACHC,GAAuB,OAAAA,EAAItE,SAAWA,GAAoB,eAAVsE,EAAIL,UAEvDoF,EAAAA,KAAK,GACLD,EAAAA,gBAIIpB,EAAA1N,UAAA6O,yBAAR,SAAiCF,GAAjC,IAAAvD,EAAAtL,KACE,OAAO6O,EACJ9E,KACCmF,EAAAA,YAAU,SAAEhF,GACV,OAAQA,EAAIL,QACV,IAAA,aACE,OAAOsF,EAAAA,GAAG7D,EAAK2C,aAAavH,YAC9B,IAAA,UACE,OAAO0I,EAAAA,WAAWlF,EAAIvI,OACxB,QACE,OAAO0N,EAAAA,WAIdtF,KAAKiF,EAAAA,oCAjFX9K,EAAAA,sDApBQoL,EAAAA,oBAK6BvD,SAoBV4B,SAlBnBd,SADAF,SAEAxB,KA+FTyC,KCnGA,IAAa2B,EAAU,SAAIxO,GACzBvB,OAAOgQ,OAAOzO,OAER0O,EAA2B,mBAAN1O,EACrB2O,EAAalQ,OAAOU,UAAUL,eAcpC,OAZAL,OAAOmQ,oBAAoB5O,GAAG6O,SAAO,SAAU5J,IAE3C0J,EAAW9O,KAAKG,EAAGiF,IAClByJ,IAAuB,WAATzJ,GAA8B,WAATA,GAA8B,cAATA,IAC7C,OAAZjF,EAAEiF,IACkB,iBAAZjF,EAAEiF,IAAyC,mBAAZjF,EAAEiF,IACxCxG,OAAOqQ,SAAS9O,EAAEiF,KAEnBuJ,EAAWxO,EAAEiF,OAIVjF,GCtBT+O,EAAA,WAME,SAAAA,EAC8BC,EACCC,GADDhQ,KAAA+P,UAAAA,EACC/P,KAAAgQ,WAAAA,EAEjC,2BANC9L,EAAAA,+EAGIC,EAAAA,OAAMC,KAAA,CAACO,qCACPR,EAAAA,OAAMC,KAAA,CAACM,QAEZoL,EAVA,GCAA,IAAAG,GAAA,WAWE,SAAAA,EAAoBC,EAAgCC,GAAhCnQ,KAAAkQ,MAAAA,EAAgClQ,KAAAmQ,QAAAA,EAqBtD,OAnBE3Q,OAAAqH,eAAYoJ,EAAA/P,UAAA,wBAAqB,KAAjC,WACE,OAAQF,KAAKkQ,MAAMH,aAAe/P,KAAKmQ,QAAQC,iDAGjD5Q,OAAAqH,eAAYoJ,EAAA/P,UAAA,yBAAsB,KAAlC,WACE,OAAOF,KAAKkQ,MAAMH,cAAgB/P,KAAKmQ,QAAQC,iDAG1CH,EAAA/P,UAAAmQ,cAAP,WACMrQ,KAAKkQ,MAAMF,eAIXhQ,KAAKsQ,sBACPtM,QAAQC,KAAKsM,EAASC,EAAKtO,yBAClBlC,KAAKyQ,wBACdzM,QAAQC,KAAKsM,EAASC,EAAKrO,gDApBhC+B,EAAAA,sDAFQ4L,SADA/K,KA0BTkL,EAhCA,GCaA,IAAAS,GAAA,WAEE,SAAAA,EACUzC,EACA0C,EACAR,EACRS,GAHQ5Q,KAAAiO,aAAAA,EACAjO,KAAA2Q,YAAAA,EACA3Q,KAAAmQ,QAAAA,EAGRS,EAAgBP,gBAyCpB,OAnCEK,EAAAxQ,UAAA2Q,uBAAA,WAAA,IAAAvF,EAAAtL,KACQ8Q,EAAsB,CAC1BC,SAAQ,WAAQ,OAAAzF,EAAK2C,aAAavH,YAClCsK,SAAQ,SAAGC,GAAkB,OAAA3F,EAAK2C,aAAa9M,KAAK8P,IACpD9C,SAAQ,SAAGrH,GAAmB,OAAAwE,EAAKqF,YAAYxC,SAASrH,KAG1D,OAAI9G,KAAKmQ,QAAQC,gBACRpQ,KAAKkR,kCAAkCJ,GAGzCA,GAGDJ,EAAAxQ,UAAAgR,kCAAR,SAA0CC,GACxC,MAAO,CACLJ,SAAQ,WAAQ,OAAAI,EAAKJ,YACrBC,SAAQ,SAAE5P,OACFgQ,EAAc7B,EAAWnO,GAC/B,OAAO+P,EAAKH,SAASI,IAEvBjD,SAAQ,SAAErH,GACR,OAAOqK,EAAKhD,SAASrH,MAK3B4J,EAAAxQ,UAAAmR,4BAAA,SAA4BC,OACpBC,EAAwCvR,KAAK6Q,yBAG7CW,EAAeD,EAAgBR,WAErCQ,EAAgBP,SAAQ5Q,EAAA,GAAMoR,EAAiBF,EAAQvK,gCA/C1D7C,EAAAA,sDATQyI,SADAiB,SAEA7I,SAEAkL,MAuDTS,EAjDA,GCAA,IAAAe,GAAA,WAEE,SAAAA,EAAoBC,GAAA1R,KAAA0R,yBAAAA,EAkEtB,OA7DED,EAAAvR,UAAAyR,mBAAA,SAAsBhJ,OACdwI,EAAOnR,KAAK0R,yBAAyBb,yBAE3C,SAASE,EAASlI,GAChB,OAAOnC,EAASmC,EAAiBF,EAAYG,OAG/C,SAAS8I,EAAc/I,EAAsBgJ,OACrC9I,EAAcjD,EAAS+C,EAAiBF,EAAYG,MAAO+I,GAC3DC,EAA0BnJ,EAAYmJ,SAE5C,GAAIA,EAASC,cAAe,KACpBC,EAA2BtJ,EAAuBC,EAAa,CACnEE,gBAAeA,EACfE,YAAWA,IAGb+I,EAASC,cAAcC,GAIzB,OADAb,EAAKH,SAASjI,GACPA,EAST,SAASkJ,EAAqBpJ,EAAsBqJ,GAGlD,OAAON,EAAc/I,EADJqJ,EADHnB,EAASlI,KASzB,MAAO,CACLkI,SAAA,WAEE,OAAOA,EADiBI,EAAKJ,aAG/BoB,WAAA,SAAWlM,GAGT,OAAOgM,EAFiBd,EAAKJ,WC5DrC,SAA+B9K,GAC7B,OAAA,SAAQmM,GACN,GAAIzS,MAAM6G,QAAQP,GAChB,MAAM,IAAIoM,MAAM9B,EAASC,EAAKhO,mBACzB,GAAmB,iBAARyD,EAChB,MAAM,IAAIoM,MAAM9B,EAASC,EAAK/N,2BAG1BwO,EAAQ7Q,EAAA,GAAA,GACd,IAAK,IAAMkS,KAAOrM,EAGhBgL,EAASqB,GAAO,EAAaA,GAG/B,OAAA,ID8C0BC,CAAetM,KAGvC+K,SAAA,SAAS/K,OACD4C,EAAkBsI,EAAKJ,WAC7B,MAfsB,mBAeC9K,EACnBgM,EAAqBpJ,EAAiB5C,GACtC2L,EAAc/I,EAAiB5C,IAErCkI,SAAA,SAASrH,GACP,OAAOqK,EAAKhD,SAASrH,0BAhE5B5C,EAAAA,sDAPQwM,MA2ETe,EApEA,GEFA,IAAAe,GAAA,WAAA,SAAAA,KAsCA,OAnCgBA,EAAAC,sBAAd,SAAoC3P,GAClC,OAAOyN,EAASC,EAAK1O,YAAYgB,IAGrB0P,EAAAE,sBAAd,SAAoC5P,GAClC,IAAKA,EACH,MAAM,IAAIuP,MAAM9B,EAASC,EAAKxO,wBAGhC,IAAKhC,KAAK2S,eAAeC,KAAK9P,GAC5B,MAAM,IAAIuP,MAAMrS,KAAKyS,sBAAsB3P,KAIjC0P,EAAAK,uBAAd,SACEC,EACAC,OAGMC,EADsBhT,KAAKiT,kBAAkBH,GACf,KAC9BV,EAAgBW,EAAaC,GACnC,GAAIZ,GAAiBA,IAAkBU,EACrC,MAAM,IAAIT,MAAM9B,EAASC,EAAKzO,cAAciR,EAAWF,EAAMhQ,KAAMsP,EAActP,OAEnF,OAAOkQ,GAGKR,EAAAS,kBAAd,SAAgCH,OACxBI,EAAsB/L,EAAiB2L,GAC7C,IAAKI,EACH,MAAM,IAAIb,MAAM9B,EAASC,EAAKvO,oBAGhC,OAAOiR,GAnCKV,EAAAG,eAAyB,IAAIQ,OAAO,mBAqCpDX,EAtCA,GC4BA,IAAAY,GAAA,WAIE,SAAAA,EACUC,EACAlD,EAGAmD,EACAxF,EACAC,EACAwF,EAGAC,GAVAxT,KAAAqT,UAAAA,EACArT,KAAAmQ,QAAAA,EAGAnQ,KAAAsT,eAAAA,EACAtT,KAAA8N,SAAAA,EACA9N,KAAA+N,eAAAA,EACA/N,KAAAuT,qBAAAA,EAGAvT,KAAAwT,cAAAA,EAbFxT,KAAAyT,YAAa,EAgBbzT,KAAA0T,QAAyB,GAMzB1T,KAAA2T,cAA8B,GA2LxC,OA/LEnU,OAAAqH,eAAWuM,EAAAlT,UAAA,SAAM,KAAjB,WACE,OAAOF,KAAKsT,eAAiBtT,KAAKsT,eAAeM,OAAS5T,KAAK0T,yCAKjElU,OAAAqH,eAAWuM,EAAAlT,UAAA,eAAY,KAAvB,WACE,OAAOF,KAAKsT,eAAiBtT,KAAKsT,eAAeP,aAAe/S,KAAK2T,+CAGxDP,EAAAS,cAAf,SAA6B9M,OhB6SNhB,EgB5SjB3E,EAAQ,GAYZ,OAVIzB,MAAM6G,QAAQO,GAChB3F,EAAQ2F,EAASN,QAEjBrF,EhBwSmB,iBADA2E,EgBxSDgB,IhBySqB,OAARhB,GAAgC,mBAARA,EgBxSlD3F,EAAA,GAAQ2G,QACS+M,IAAb/M,EACD,GAEAA,EAGH3F,GAGMgS,EAAAW,oBAAf,SAAmCC,GACjCA,EAAapE,QAAQ4C,GAAgBS,oBAMvCG,EAAAlT,UAAAmM,IAAA,SAAI2H,WACFZ,EAAaW,oBAAoBC,GACzB,IAAAC,EAAAjU,KAAAkU,eAAAF,GAAAC,UACR,IAAKA,EAAUtT,OAAQ,MAAO,OhB0OFwT,EACxBC,EACAC,EAEAC,EgB5OEC,EhB8HV,SAA2BP,OACnBQ,EAAQ,SAAIC,OACVvB,EAAOc,EAAaU,MAAI,SAACC,GAAK,OAAAA,IAAMF,KAC1C,IAAKvB,EACH,MAAM,IAAIb,MACR,0BAA0BoC,EAAU,wDAIxC,OAAOvB,EAAKtO,GAAe,OAG7B,OAAOoP,EAAa5N,QAAM,SACvBqE,EAAuBgK,GAChB,IAAA7R,EAAA6R,EAAA7P,GAAE9B,EAAAF,EAAAE,KAAMoE,EAAAtE,EAAAsE,SAEd,OADAuD,EAAM,IAAWvD,GAAY,IAAIsD,IAAIgK,GAC9B/J,IAET,IgBhJkCmK,CAAWX,GACvCY,GhBuOsBV,EgBvOmBI,EhBwO3CH,EAAmB,GACnBC,EAAkC,GAElCC,EAAK,SAAIxR,EAAcgS,QAAA,IAAAA,IAAAA,EAAA,IACtBnV,MAAM6G,QAAQsO,KACjBA,EAAY,IAGdA,EAAUpT,KAAKoB,GACfuR,EAAQvR,IAAQ,EAEhBqR,EAAMrR,GAAM8M,SAAO,SAAEmF,GACnB,GAAID,EAAUE,QAAQD,IAAQ,EAC5B,MAAM,IAAI1C,MACR,wBAAwB0C,EAAG,qBAAqBjS,EAAI,MAAMgS,EAAUG,KAAK,SAIzEZ,EAAQU,IAIZT,EAAMS,EAAKD,EAAUrO,MAAM,OAGzB2N,EAAOY,QAAQlS,GAAQ,GACzBsR,EAAO1S,KAAKoB,IAIhBtD,OAAO0V,KAAKf,GAAOvE,SAAO,SAACuF,GAAK,OAAAb,EAAMa,MAE/Bf,EAAOgB,WgBvQNC,EhB2LV,SACEtP,EACAuP,QAAA,IAAAA,IAAAA,EAAA,QAEMhB,EAAK,SAAIiB,EAAsBC,GACnC,IAAK,IAAMlD,KAAOiD,EAChB,GAAIA,EAAM1V,eAAeyS,IAAQiD,EAAMjD,GAAK0C,QAAQQ,IAAc,EAAG,KAC7DC,EAASnB,EAAMiB,EAAOjD,GAC5B,OAAkB,OAAXmD,EAAqBA,EAAM,IAAInD,EAAQA,EAGlD,OAAO,MAGT,IAAK,IAAMA,KAAOvM,EAChB,GAAIA,EAAIlG,eAAeyS,GAAM,KACrBoD,EAASpB,EAAMvO,EAAKuM,GAC1BgD,EAAOhD,GAAOoD,EAAYA,EAAM,IAAIpD,EAAQA,EAIhD,OAAOgD,EgBhNiCK,CAAmBpB,GACnDqB,EAA2D3B,EhB4JrD7N,QAAM,SACjBqE,EAA2CgK,GAG1C,OADAhK,EADagK,EAAW7P,GACR,MAAK6P,EACdhK,IAET,IgBjKMoL,EAAoC,OAE1C,IAAmB,IAAAC,EAAAC,EAAAlB,GAAYmB,EAAAF,EAAA3U,QAAA6U,EAAA3U,KAAA2U,EAAAF,EAAA3U,OAAE,CAA5B,IAAM8U,EAAID,EAAA5U,MACPqT,EAAiCmB,EAAUK,GAC3CnN,EAAgBuM,EAAOY,GACvB/C,EAAsBuB,EAAW7P,GAEvC5E,KAAKkW,qBAAqBhD,EAAMpK,OAE1BqN,EAAwB,CAC5BrT,KAAImT,EACJnN,MAAKA,EACLG,eAAe,EACfnC,QAASoM,EAAKpM,QACdgL,SAAU9R,KAAKqT,UAAU9L,IAAIkN,GAC7B1N,SAAUqM,EAAaS,cAAcX,EAAKnM,WAMvC/G,KAAKoW,8BAA8BH,EAAMnN,IAC5C+M,EAAmBnU,KAAKyU,GAG1BnW,KAAK4T,OAAOlS,KAAKyU,qGAGnB,OAAON,GAMTzC,EAAAlT,UAAAmW,qBAAA,SAAqBrC,OACbsC,EAAgCtC,GAAgB,GAEhDuC,EAA8BvW,KAAKqM,IAAIiK,GAM7C,MAAO,CAAEvP,SALQwP,EAAanQ,QAAM,SACjCqE,EAAa9B,GACZ,OAAA7C,EAAS2E,EAAQ9B,EAAYG,MAAOH,EAAY5B,YAClD,IAEiB6M,OAAQ2C,IAM7BnD,EAAAlT,UAAAsW,sBAAA,WAAA,IAAAlL,EAAAtL,KACMA,KAAKyT,aACTzT,KAAK8N,SACF/D,KACCE,EAAAA,QAAM,SAAEC,GAAuB,MAAU,eAAVA,EAAIL,UACnC4M,EAAAA,UAAQ,SAAE7T,OAAEgD,EAAAhD,EAAAgD,OACV,OAAA0F,EAAKoL,cAAcpL,EAAKwC,SAAQ,GAAW/D,KACzCS,EAAAA,KAAG,WAAC,MAAA,CAAuB5E,OAAMA,EAAEiE,OAAM,iBACzC8M,EAAAA,eAAc,CAAkB/Q,OAAMA,EAAEiE,OAAM,aAC9C+M,EAAAA,YAAU,SAACjV,GACT,OAAAwN,EAAAA,GAAE,CAAkBvJ,OAAMA,EAAEiE,OAAM,UAAwBlI,MAAKA,YAKtEsJ,WAAS,SAACf,GAAO,OAAAoB,EAAKyC,eAAe5M,KAAK+I,MAC7ClK,KAAKyT,YAAa,IAMpBL,EAAAlT,UAAAwW,cAAA,SAAcG,EAA2BjR,eACjC0L,EAAU,OAEhB,IAAuB,IAAAwF,EAAAf,EAAA/V,KAAK4T,QAAMmD,EAAAD,EAAA3V,QAAA4V,EAAA1V,KAAA0V,EAAAD,EAAA3V,OAAE,CAA/B,IAAM6V,EAAQD,EAAA3V,MACXyE,EAAOF,EAA0BC,GACjCqR,EAAcD,EAASlQ,QAAQjB,GAErC,GAAIoR,MACF,IAAyB,IAAAC,EAAAnB,EAAAkB,GAAWE,EAAAD,EAAA/V,QAAAgW,EAAA9V,KAAA8V,EAAAD,EAAA/V,OAAE,CAAjC,IAAMiW,EAAUD,EAAA/V,MACbiW,EAAerX,KAAKuT,qBAAqB5B,mBAAmBqF,GAClE,QACMvM,EAASuM,EAASlF,SAASsF,EAAWE,IAAID,EAAczR,GAExD6E,aAAkB8M,UACpB9M,EAAS+M,EAAAA,KAAK/M,IAGZA,aAAkBM,EAAAA,WAChBqM,EAAWK,QAAQC,oBAErBjN,EAASA,EAAOV,KACd4N,EAAAA,UAAUd,EAAS9M,KAAKb,EAAkB,OAI9CuB,EAAS0E,EAAAA,GAAG,IAAIpF,KAAKiF,EAAAA,eAGvBsC,EAAQ5P,KAAK+I,GACb,MAAOjJ,GACP8P,EAAQ5P,KAAK0N,EAAAA,WAAW5N,0MAUhC,OAJK8P,EAAQ3Q,QACX2Q,EAAQ5P,KAAKyN,EAAAA,GAAG,KAGXZ,EAAAA,SAAS+C,IAGV8B,EAAAlT,UAAAgU,eAAR,SACEF,WAEMC,EAAkC,GAClC2D,EAA0B5X,KAAK+S,iBAErC,IAAyB,IAAA8E,EAAA9B,EAAA/B,GAAY8D,EAAAD,EAAA1W,QAAA2W,EAAAzW,KAAAyW,EAAAD,EAAA1W,OAAE,CAAlC,IAAMsT,EAAUqD,EAAA1W,MACb4R,EAAoBR,GAAgBK,uBAAuB4B,EAAYmD,IACrDA,EAAU5E,KAEhCiB,EAAUvS,KAAK+S,GACfmD,EAAU5E,GAAayB,qGAI3B,MAAO,CAAER,UAASA,IAGZb,EAAAlT,UAAAgW,qBAAR,SAA6BhD,EAAqBpK,GAChDoK,EAAKlM,KAAO8B,EACZoK,EAAKjM,mBAAqBc,EAAWe,EAAM5C,MAAM,KAAMlG,KAAKmQ,UAUtDiD,EAAAlT,UAAAkW,8BAAR,SAAsCtT,EAAckE,OAC5C+Q,OACmCjE,IAAvCpN,EAAS1G,KAAKwT,cAAexM,GAC/B,OAAOhH,KAAK+S,aAAajQ,IAASiV,uBAjNrC7T,EAAAA,sDAvCoB8T,EAAAA,gBAYFjT,SAoCSqO,EAAY5F,WAAA,CAAA,CAAA3H,KAFnC4H,EAAAA,UAAQ,CAAA5H,KACR6H,EAAAA,kBAlBiC3B,SAC7B4B,SACA8D,mCAqBJhE,EAAAA,UAAQ,CAAA5H,KACR1B,EAAAA,OAAMC,KAAA,CAAC6T,EAAAA,0BAqMZ7E,EAnNA,qBC5BE,SAAA8E,EACUC,EACAC,EACAC,GAFArY,KAAAmY,wBAAAA,EACAnY,KAAAoY,oBAAAA,EACApY,KAAAqY,aAAAA,EA4DZ,OAzDEH,EAAAhY,UAAAoY,cAAA,SAAiB1S,EAAW0L,GAA5B,IAAAhG,EAAAtL,KACEA,KAAKmY,wBACFtH,yBACA1C,SAASvI,GACTmE,KACCE,EAAAA,QAAM,WAAO,QAAEqH,KACfiH,EAAAA,KAAG,WAAO,OAAAjN,EAAKkN,WAAW,EAAS5E,WACnC6C,EAAAA,UAAQ,WAAO,OAAAnL,EAAK+M,aAAaI,oBACjCxO,EAAAA,QAAM,SAACyO,GAAmB,QAAEA,MAE7BzN,WAAS,WAAO,OAAAK,EAAKqN,gBAAgB,EAAS/E,YAMnDsE,EAAAhY,UAAAsY,WAAA,SAAWjC,eACT,IAA0B,IAAAqC,EAAA7C,EAAAQ,GAAYsC,EAAAD,EAAAzX,QAAA0X,EAAAxX,KAAAwX,EAAAD,EAAAzX,OAAE,CAAnC,IAAMwH,EAAWkQ,EAAAzX,MACd0Q,EAA0BnJ,EAAYmJ,SAE5C,GAAIA,EAASC,cAAe,KAMpB+G,EAAoCpQ,EAAoBC,EAAa,CACzEE,gBANmC,GAOnCE,YAN+B/I,KAAKmY,wBACnCtH,yBACAE,aAOHe,EAASC,cAAc+G,GAGrBhH,EAASiH,YACXjH,EAASiH,WAAW/Y,KAAKgZ,gBAAgBrQ,IAG3CA,EAAYM,eAAgB,sGAOhCiP,EAAAhY,UAAAyY,gBAAA,SAAgBpC,eACd,IAA0B,IAAA0C,EAAAlD,EAAAQ,GAAY2C,EAAAD,EAAA9X,QAAA+X,EAAA7X,KAAA6X,EAAAD,EAAA9X,OAAE,CAAnC,IAAMwH,EAAWuQ,EAAA9X,MACd0Q,EAA0BnJ,EAAYmJ,SACxCA,EAASqH,oBACXrH,EAASqH,mBAAmBnZ,KAAKgZ,gBAAgBrQ,wGAK/CuP,EAAAhY,UAAA8Y,gBAAR,SAAwBrQ,GACtB,OAAO3I,KAAKoY,oBAAoBzG,mBAAmBhJ,wBA/DtDzE,EAAAA,sDAJQwM,UADAe,UAHA2H,EAAAA,oBAyETlB,SC5DamB,GAA8B,CACzCC,WAAU,SAAG1S,GACX,OAAQA,GAAU,EAAuC,4BAAM,IAEjE2S,cAAa,SAAG3S,EAAa6Q,GACtB7Q,IACL,EAAuC,2BAAI6Q,KAqB/C,SAAgB+B,GACdC,EACA/R,EACAgS,OAaIC,EAXEhS,EAAiB+R,GAAoBA,EAAiB/R,eAStDiS,EAAaC,EAAAA,SARJ,eAA8B,IAAAzV,EAAA,GAAAgF,EAAA,EAAAA,EAAA1I,UAAAC,OAAAyI,IAAAhF,EAAAgF,GAAA1I,UAAA0I,OACrC0Q,EAAcpS,EAAW7G,MAAM8G,EAAgBvD,GACrD,GAAI0V,aAAuBtR,SAAU,KAC7BuR,EAAkBF,EAAAA,QAAQhZ,MAAM,KAAM,CAACiZ,IAC7C,OAAOC,EAET,OAAOD,KAGHE,EAgCR,SACEJ,EACAlS,EACAgS,OAEMM,EAAmBvS,EAAuBmS,GAChDI,EAAiBtS,WAAaA,MAC1BuS,EAA0B,WAAS,MAAA,IACnCP,IACFM,EAAiBrS,eAAiB+R,EAAiB/R,eACnDqS,EAAiBpS,aAAe8R,EAAiB9R,aACjDqS,EACEP,EAAiB7R,oBAAsBoS,OAErCC,EAAqB9Z,EAAA,GAAQ4Z,GAGnC,OAFAA,EAAiBnS,mBAAkB,WACjC,OAiBJ,SACEmS,EACAG,GAUA,OARqB/Z,EAAA,GAChBiH,EAAsBE,MACrB8R,GAA4BC,WAAWU,EAAiBrS,iBAAmB,GAC3E0R,GAA4BC,WAAWU,EAAiBtS,aAAe,GACvEsS,EAAiBnS,sBAAwB,GAC1CsS,GA1BHC,CAAyBF,EAAuBD,MAC3CD,EAjDkBK,CAAyBT,EAAYlS,EAAYgS,GA6B1E,OAFAM,EAAiB/S,mBAxBO,SAAI6L,OACpBxB,EAAU,GAGRnM,GADRwU,EAAcA,GA8ClB,SACEK,EACAP,QAAA,IAAAA,IAAAA,EAAA,QAEMxU,EAAkB+U,EAAiBnS,qBAEnCyS,EAsBR,SACEN,EACAP,QAAA,IAAAA,IAAAA,EAAA,QAEMc,EAAmB,GACnBC,EACiB,IAArBf,EAAU9Y,QAAgBqZ,EAAiBnS,qBAAqB3C,qBAC5DyC,EAAiBqS,EAAiBrS,eACxC,GAAIA,GAAkB6S,EAAyB,CAE5BrT,EAAiBQ,IAEhC4S,EAAiB7Y,KAAKiG,GAGtB8R,GACFc,EAAiB7Y,KAAIb,MAArB0Z,EAAgB3Y,EAAS6X,IAE3B,OAAOc,EAzCkBE,CAAoBT,EAAkBP,GACZjP,KAAG,SAACkQ,GAAY,OAAAC,GAAcD,MACjF,MAAO,CACLzV,gBAAeA,EACfqV,0BAAyBA,GAvDIM,CAAuBZ,EAAkBP,IAC9DxU,gBAAAE,eACAmV,EAAAX,EAAAW,0BAGRhJ,EAAQ5P,KAAIb,MAAZyQ,EAAO1P,EAAS0Y,EAA0B9P,KAAG,SAACqQ,GAAS,OAAAA,EAAM/H,QAK7D,IACE,OAAO8G,EAAU/Y,WAAA,EAAAe,EAAI0P,IACrB,MAAOwJ,GACP,GAAIA,aAAcC,WAAa5V,EAC7B,OAGF,MAAM2V,IAMHlB,EA4ET,SAAgBe,GAAcD,OACtB1D,EAAWlP,EAAoB4S,IAAavT,EAAiBuT,GACnE,OAAQ1D,GAAYA,EAAS/P,oBAAuByT,oBCnJpD,SAAAM,EACU/M,EACAyD,EACAvB,EACA8K,EAGRC,GANQlb,KAAAiO,aAAAA,EACAjO,KAAA0R,yBAAAA,EACA1R,KAAAmQ,QAAAA,EACAnQ,KAAAib,2BAAAA,EAKRjb,KAAKmb,gBAAgBD,GA4FzB,OAtFEF,EAAA9a,UAAAiO,SAAA,SAASiN,GACP,OAAOpb,KAAK0R,yBAAyBb,yBAAyB1C,SAASiN,IASzEJ,EAAA9a,UAAAmb,OAAA,SAAOX,GAAP,IAAApP,EAAAtL,KACQsb,EAAaX,GAAcD,GACjC,OAAO1a,KAAKiO,aAAalE,KACvBS,EAAAA,IAAI8Q,GACJ1E,EAAAA,YAAU,SAAE2E,GAEF,IAAApW,EAAAmG,EAAA6E,QAAAlL,gBAAAE,eAER,OAAIoW,aAAeR,WAAa5V,EACvBgK,EAAAA,QAAG2E,GAIL1E,EAAAA,WAAWmM,MAEpBC,EAAAA,uBACA5Q,EAAU5K,KAAKib,8BAWnBD,EAAA9a,UAAAub,WAAA,SAAWf,GACT,OAAO1a,KAAKqb,OAAOX,GAAU3Q,KAAKkF,EAAAA,KAAK,KASzC+L,EAAA9a,UAAAwb,eAAA,SAAehB,GAEb,OADmBC,GAAcD,EAC1BY,CAAWtb,KAAKiO,aAAavH,aAMtCsU,EAAA9a,UAAA+K,UAAA,SAAUqM,GACR,OAAOtX,KAAKiO,aAAalE,KAAKa,EAAU5K,KAAKib,6BAA6BhQ,UAAUqM,IAMtF0D,EAAA9a,UAAAyb,SAAA,WACE,OAAO3b,KAAK0R,yBAAyBb,yBAAyBE,YAOhEiK,EAAA9a,UAAA0b,MAAA,SAAM9I,GACJ,OAAO9S,KAAK0R,yBAAyBb,yBAAyBG,SAAS8B,IAGjEkI,EAAA9a,UAAAib,gBAAR,SAAwBD,OAChB9Z,EAAqBpB,KAAKiO,aAAa7M,MAE7C,IAD+BA,GAAuC,IAA9B5B,OAAO0V,KAAK9T,GAAOT,OACzC,KAEVkb,EADgCrc,OAAO0V,KAAKlV,KAAKmQ,QAAQnL,eAAerE,OAAS,OAE9EX,KAAKmQ,QAAQnL,cAAkBkW,GACpCA,EAEJlb,KAAKiO,aAAa9M,KAAK0a,yBApG5B3X,EAAAA,sDALQyI,SAFA+D,UAIA3L,SALAoG,kCAeJsC,EAAAA,UAAQ,CAAA5H,KACR1B,EAAAA,OAAMC,KAAA,CAAC6T,EAAAA,0BA+FZ+C,KC3GA,IAAAc,GAAA,WAKE,SAAAA,EAAYC,EAAc9T,GACxB6T,EAAcC,MAAQA,EACtBD,EAAc7T,OAASA,EAE3B,OAPgB6T,EAAAC,MAAsB,KACtBD,EAAA7T,OAA4B,yBAH3C/D,EAAAA,sDARQ8W,UACAjW,KAgBT+W,EATA,GCLA,kBAAA,SAAAE,KAKA,OAJExc,OAAAqH,eAAWmV,EAAA,OAAI,KAAf,WAEE,MAAO,0CAEXA,mBAWE,SAAAC,EAAmBC,GAAAlc,KAAAkc,YAAAA,EACrB,OANE1c,OAAAqH,eAAWoV,EAAA,OAAI,KAAf,WAEE,MAAO,kDAIXA,SChBME,GAAwB,IAAIC,EAAAA,cAAuB,GCczD,IAAAC,GAAA,WAEE,SAAAA,EACEC,EACAnE,EACAoE,EACAC,EAGA5I,EACA3L,EACAwU,QAJA,IAAA7I,IAAAA,EAAA,IDRJ,WACE,QAGQ8I,EAAK,OAAgBA,GACrBC,IACFD,GAAiC,mBAApBA,EAAGE,cAAuD,mBAAjBF,EAAGG,UAC7DV,GAAsBhb,KAAKwb,GAC3B,MAAA/Z,GACAuZ,GAAsBhb,MAAK,WAE3Bgb,GAAsBjR,YCItB4R,GAEAzV,EAAsBG,IAAIS,EAAOhD,iBAAmB,QAG9CqM,EAA6BgL,EAAQjG,qBAAqBzC,GAEhEuE,EAAwB9G,4BAA4BC,GAGpDgL,EAAQ9F,wBAGRiG,EAAsBnE,cAAc,IAAI0D,GAAa1K,GAEzD,2BA7BCyL,EAAAA,oDAlBQ3J,UACA1C,UACAsK,UACAc,kCAsBJrO,EAAAA,UAAQ,CAAA5H,KACR1B,EAAAA,OAAMC,KAAA,CAACE,YAtBHS,SAMAmT,MAqCTmE,EA7BA,GCNAW,GAAA,WAEE,SAAAA,EACET,EACApE,EACAmE,EAGA1I,EACA6I,QAHA,IAAA7I,IAAAA,EAAA,QAOMqJ,EAAwCD,EAAkBE,cAActJ,GAGxEtC,EAA6BgL,EAAQjG,qBAAqB4G,GAE5D3L,EAAQsC,OAAOjT,SACjBwX,EAAwB9G,4BAA4BC,GAGpDmL,EAAsBnE,cAAc,IAAI2D,GAAY3K,EAAQvK,UAAWuK,IAU7E,OANiB0L,EAAAE,cAAf,SAA6BtJ,GAC3B,YAD2B,IAAAA,IAAAA,EAAA,IACpBA,EAAOxN,QAAM,SACjB+W,EAA6BC,GAAiC,OAAAD,EAAMtb,OAAOub,KAC5E,yBA7BLL,EAAAA,oDAZQ/B,UACAtK,UACA0C,kCAgBJ3F,EAAAA,UAAQ,CAAA5H,KACR1B,EAAAA,OAAMC,KAAA,CAACI,YAfH0T,MAwCT8E,EAhCA,GCiCAK,GAAA,WAAA,SAAAA,KAqHA,OA9GgBA,EAAAC,QAAd,SACE1J,EACA6D,GAEA,YAHA,IAAA7D,IAAAA,EAAA,SACA,IAAA6D,IAAAA,EAAA,IAEO,CACL8F,SAAUlB,GACVmB,UAAS5b,EAAA,CACPwR,GACA3B,GACAzF,EACAD,EACAqN,EAAAA,iBACAnJ,GACAH,EACAoI,GACAtK,EACAD,EACA+C,GACAvF,EACA6P,GACArO,EACAmP,GACAjP,GACG+G,EACAyJ,EAAWI,mBAAmB7J,EAAQ6D,MAQjC4F,EAAAK,WAAd,SAAyB9J,GACvB,YADuB,IAAAA,IAAAA,EAAA,IAChB,CACL2J,SAAUP,GACVQ,UAAS5b,EAAA,CACPwR,GACAvG,GACG+G,EAAM,CACT,CACE+J,QAASnZ,EACToZ,OAAO,EACPC,SAAUjK,OAMHyJ,EAAAI,mBAAf,SACE7J,EACA6D,GAEA,MAAO,CACL,CACEkG,QAASjZ,EACTmZ,SAAUC,EAAAA,qBAEZ,CACEH,QAAShZ,EACTkZ,SAAU9N,EAAAA,WAEZ,CACE4N,QAASjY,EACTqY,SAAUtG,EAAQnS,mBAAqBpC,GAEzC,CACEya,QAASrZ,EACTuZ,SAAUjK,GAEZ,CACE+J,QAASN,EAAWW,aACpBH,SAAUpG,GAEZ,CACEkG,QAAS5Y,EACTkZ,WAAYZ,EAAWa,kBACvBC,KAAM,CAACd,EAAWW,eAEpB,CACEL,QAASS,EAAAA,uBACTH,WAAYZ,EAAWgB,4BACvBT,OAAO,EACPO,KAAM,CAAC/E,EAAAA,mBAET,CACEuE,QAAS1F,EAAAA,oBACTgG,WAAYZ,EAAWiB,iBAEzB,CACEX,QAASY,EAAAA,2BACTC,YAAa/M,IAEf,CACEkM,QAASc,EAAAA,mBACTD,YAAapL,MAKJiK,EAAAa,kBAAf,SAAiCzG,GAC/B,OAAOjY,OAAOa,OAAO,IAAI0E,EAAc0S,IAG1B4F,EAAAgB,4BAAf,SAA2ChG,GACzC,OAAA,WAAa,OAAAA,EAAaqG,cAGbrB,EAAAiB,gBAAf,WACE,OAAOK,EAAAA,aAAa9S,OAjHEwR,EAAAW,aAAe,IAAIzZ,EAAAA,eAAkC,oCAF9EwY,EAAAA,WAqHDM,EArHA,GCvCA,SAAgBuB,GAA6BhY,GJ2BpCuV,GAAsB0C,eItBP5T,WAAS,SAAC0R,GAC1BA,IACmB/V,EAAAkY,OAGnB9a,QAAQC,KAAKtB,EAAgBE,EAAgBH,0BAA0BkE,EAAO9D,eCThFic,GAAmB,GAUzB,SAAgBC,GAAiBlc,EAAcmc,EAAmBjX,GAGhE,YAHgE,IAAAA,IAAAA,EAAA,IAGrC,iBAF3BiX,EAAeA,GAiBjB,SAAqCnc,OAC7Boc,EAAwBpc,EAAKnC,OAAS,EAE5C,OADgCmC,EAAKqc,WAAWD,KAAmBH,GAC3Cjc,EAAK2D,MAAM,EAAGyY,GAAiBpc,EApB1Bsc,CAAqBtc,IAMzCiF,EAHsBC,EAAMrH,UAC9Bse,GAAgBjX,GACjBiX,EAAY/Y,MAAM,KACQ4V,GAAoB,QACzCmD,EAAYra,IAAaqa,EAAYra,GAAUoC,KACjDe,EAAWkX,EAAYra,GAAUoC,KAAKd,MAAM,KAAM4V,GAAoB,QAGxEmD,EC/BT,IAAAI,GAAA,WAIA,SAAAA,KASA,OAPEA,EAAAnf,UAAAoD,MAAA,SAASC,GACP,OAAOA,KAGT8b,EAAAnf,UAAAyD,MAAA,SAASJ,GACP,OAAOA,yBAPVW,EAAAA,aASDmb,EAbA,iBCKE,SAAAC,EAA6Bxc,GAA7B,IAAAwI,EAAAtL,KAA6BA,KAAA8C,KAAAA,MACrByc,EAAmB9X,EAAsB,MAC/C8X,EAAiBtY,mBAAkB,SAAI6L,OAG/B0M,EAASzX,EAAW,CAACuD,EAAKxI,MAAOgZ,GAAoB,QAE3D,OADAyD,EAAiBtY,mBAAqBuY,EAC/BA,EAAO1M,IAWpB,OAPEwM,EAAApf,UAAAuf,QAAA,WACE,OAAOzf,KAAK8C,MAGdwc,EAAApf,UAAAwf,SAAA,WACE,MAAO,cAAc1f,KAAK8C,KAAI,KAElCwc,cChBA,SACExY,EACA2Q,GAEA,OAAA,SAAQ7Q,EAAa9D,WAGnB,GAFuB8D,EAAO/G,eAAe,aAG3C,MAAM,IAAIwS,MAAM1P,EAAgBE,EAAgBR,yBAG5C6Q,EAAOvM,EAAoBC,EAAO3G,aAEnCN,MAAM6G,QAAQM,KACjBA,EAAU,CAACA,QAGb,IAAqB,IAAA6Y,EAAA5J,EAAAjP,GAAO8Y,EAAAD,EAAAxe,QAAAye,EAAAve,KAAAue,EAAAD,EAAAxe,OAAE,CAAzB,IACG0E,EADS+Z,EAAAxe,MACKyE,KAEfqN,EAAKpM,QAAQjB,KAChBqN,EAAKpM,QAAQjB,GAAQ,IAGvBqN,EAAKpM,QAAQjB,GAAMnE,KAAK,CACtB4V,GAAIxU,EACJ2U,QAASA,GAAW,GACpB5R,KAAIA,kOCvBZ,SAA0BoZ,OAAiB,IAAAjX,EAAA,GAAAoB,EAAA,EAAAA,EAAA1I,UAAAC,OAAAyI,IAAApB,EAAAoB,EAAA,GAAA1I,UAAA0I,GACzC,OAAA,SAGExC,EAAW0L,SACLxP,EAAewP,EAAIoN,WACnBG,EAAa,KAAK/c,EAAI,aACtB4X,EAAWsE,GAAiBlc,EAAMmc,EAAajX,GAErDxI,OAAOsgB,iBAAiBlZ,IAAMhE,EAAA,IAC3Bid,GAAa,CACZE,UAAU,EACVC,YAAY,EACZC,cAAc,GAEhBrd,EAACE,GAAO,CACNkd,YAAY,EACZC,cAAc,EACd1Y,IAAA,WACE,OAAOvH,KAAK6f,KAAgB7f,KAAK6f,GJnB3C,SAAgDnF,GAC9C,IAAKoB,GAAcC,MACjB,MAAM,IAAI1J,MAAM1P,EAAgBE,EAAgBT,iCAGlD,OAAO0Z,GAAcC,MAAMV,OAAOX,GIcqBwF,CAAuBxF,wBCvBhF,SAA4BjB,GAC1B,OAAA,SACE7S,EACA0L,EACA6N,GAIA,KAFsBA,GAAmC,OAArBA,EAAW/e,OAG7C,MAAM,IAAIiR,MAAM1P,EAAgBE,EAAgBP,2BAG5CoF,EAAayY,EAAW/e,MAC1BwY,EAAkB,KAChBwG,EAAgB,CACpBH,cAAc,EACd1Y,eAeE,OAbAqS,EACEA,GACAJ,GACEC,EAAS,EAET,CACE9R,eAAgBf,EAChBgB,aAAc0K,EAAIoN,WAClB7X,8BACE,MAAO,QASnB,OADA,EAAiC,WAAIH,EAC9B0Y,sBCrCX,SAAgC3I,GAC9B,OAAA,SAEI7Q,EACAyZ,EACAF,GAEA,GAAIE,EAAY,KAER3Y,EAAayY,EAAW/e,OAAS,EAAkBsG,WACrDA,GACF2R,GAA4BE,cAAc7R,EAAY+P,QAIxD4B,GAA4BE,cAAc3S,EAAQ6Q,aCL1D,SAAyBA,GAwBvB,OAAA,SAAQ7Q,GACNgY,GAA6BhY,OACvB6N,EAAiC7N,EACjCsM,EAAsBvM,EAAoB8N,GAC1C6L,EAA0C9gB,OAAO+gB,eAAe9L,GAChE+L,EA5BR,SAAyBF,OACjBG,EACJH,EAAoBzb,IAAqB,GAC3C,OAAAzE,EAAA,GAAYqgB,EAAuBhJ,IAyBaiJ,CAAgBJ,IAtBlE,SAAwBK,GACd,IAAAzN,EAAAyN,EAAAzN,KAAMoN,EAAAK,EAAAL,oBAAqBE,EAAAG,EAAAH,uBAC3BtZ,EAAAsZ,EAAAtZ,SAAUH,EAAAyZ,EAAAzZ,SAAUjE,EAAA0d,EAAA1d,KACtBkQ,EACY,iBAATlQ,EAAoBA,EAAQA,GAAQA,EAAK2c,WAAc,KAGhE,GAFAjN,GAAgBE,sBAAsBM,GAElCsN,EAAoBzgB,eAAe+E,GAAW,KAC1Cgc,EAAwCN,EAAoB1b,IAAa,GAC/EsO,EAAKpM,QAAO1G,EAAA,GAAQ8S,EAAKpM,QAAY8Z,EAAc9Z,SAGrDoM,EAAKhM,SAAWA,EAChBgM,EAAKnM,SAAWA,EAChBmM,EAAKpQ,KAAOkQ,EASZ6N,CAAe,CAAE3N,KAAIA,EAAEoN,oBAAmBA,EAAEE,uBAAsBA,IAClE/L,EAAW5P,GAAoB2b,gFnC/BnC,SAA8BM,OACtBC,EAAQpb,EAA0Bmb,GAExC,OAAA,SAAgBE,GACd,OAAOD,IAAUpb,EAA0Bqb,gLEE/C,eAAyB,IAAA7X,EAAA,GAAAC,EAAA,EAAAA,EAAA1I,UAAAC,OAAAyI,IAAAD,EAAAC,GAAA1I,UAAA0I,GACvB,OAAOC,EAAiBF,uBA0B1B,eAAiC,IAAAA,EAAA,GAAAC,EAAA,EAAAA,EAAA1I,UAAAC,OAAAyI,IAAAD,EAAAC,GAAA1I,UAAA0I,GAC/B,OAAOC,EAAiBF,EAAc,CAAA,kCAQxC,eAAkC,IAAAA,EAAA,GAAAC,EAAA,EAAAA,EAAA1I,UAAAC,OAAAyI,IAAAD,EAAAC,GAAA1I,UAAA0I,GAMhC,OAAOC,EAAiBF,EALA,oCAK+BoB,6CAQzD,eAAgC,IAAApB,EAAA,GAAAC,EAAA,EAAAA,EAAA1I,UAAAC,OAAAyI,IAAAD,EAAAC,GAAA1I,UAAA0I,GAC9B,OAAOC,EAAiBF,EAAc,CAAA,kCAjCxC,eAAmC,IAAAA,EAAA,GAAAC,EAAA,EAAAA,EAAA1I,UAAAC,OAAAyI,IAAAD,EAAAC,GAAA1I,UAAA0I,GACjC,OAAOC,EAAiBF,EAAc,CAAA","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export enum VALIDATION_CODE {\r\n  STATE_NAME = 'STATE_NAME',\r\n  STATE_UNIQUE = 'STATE_UNIQUE',\r\n  STATE_NAME_PROPERTY = 'STATE_NAME_PROPERTY',\r\n  STATE_DECORATOR = 'STATE_DECORATOR',\r\n  INCORRECT_PRODUCTION = 'INCORRECT_PRODUCTION',\r\n  INCORRECT_DEVELOPMENT = 'INCORRECT_DEVELOPMENT',\r\n  SELECT_FACTORY_NOT_CONNECTED = 'SELECT_FACTORY_NOT_CONNECTED',\r\n  ACTION_DECORATOR = 'ACTION_DECORATOR',\r\n  SELECTOR_DECORATOR = 'SELECTOR_DECORATOR',\r\n  ZONE_WARNING = 'ZONE_WARNING',\r\n  PATCHING_ARRAY = 'PATCHING_ARRAY',\r\n  PATCHING_PRIMITIVE = 'PATCHING_PRIMITIVE',\r\n  UNDECORATED_STATE_IN_IVY = 'UNDECORATED_STATE_IN_IVY'\r\n}\r\n\r\nexport const CONFIG_MESSAGES = {\r\n  [VALIDATION_CODE.STATE_NAME]: (name: string) =>\r\n    `${name} is not a valid state name. It needs to be a valid object property name.`,\r\n  [VALIDATION_CODE.STATE_NAME_PROPERTY]: () => `States must register a 'name' property`,\r\n  [VALIDATION_CODE.STATE_UNIQUE]: (current: string, newName: string, oldName: string) =>\r\n    `State name '${current}' from ${newName} already exists in ${oldName}`,\r\n  [VALIDATION_CODE.STATE_DECORATOR]: () => 'States must be decorated with @State() decorator',\r\n  [VALIDATION_CODE.INCORRECT_PRODUCTION]: () =>\r\n    'Angular is running in production mode but NGXS is still running in the development mode!\\n' +\r\n    'Please set developmentMode to false on the NgxsModule options when in production mode.\\n' +\r\n    'NgxsModule.forRoot(states, { developmentMode: !environment.production })',\r\n  [VALIDATION_CODE.INCORRECT_DEVELOPMENT]: () =>\r\n    'RECOMMENDATION: Set developmentMode to true on the NgxsModule when Angular is running in development mode.\\n' +\r\n    'NgxsModule.forRoot(states, { developmentMode: !environment.production })',\r\n  [VALIDATION_CODE.SELECT_FACTORY_NOT_CONNECTED]: () =>\r\n    'You have forgotten to import the NGXS module!',\r\n  [VALIDATION_CODE.ACTION_DECORATOR]: () =>\r\n    '@Action() decorator cannot be used with static methods',\r\n  [VALIDATION_CODE.SELECTOR_DECORATOR]: () => 'Selectors only work on methods',\r\n  [VALIDATION_CODE.ZONE_WARNING]: () =>\r\n    'Your application was bootstrapped with nooped zone and your execution strategy requires an actual NgZone!\\n' +\r\n    'Please set the value of the executionStrategy property to NoopNgxsExecutionStrategy.\\n' +\r\n    'NgxsModule.forRoot(states, { executionStrategy: NoopNgxsExecutionStrategy })',\r\n  [VALIDATION_CODE.PATCHING_ARRAY]: () => 'Patching arrays is not supported.',\r\n  [VALIDATION_CODE.PATCHING_PRIMITIVE]: () => 'Patching primitives is not supported.',\r\n  [VALIDATION_CODE.UNDECORATED_STATE_IN_IVY]: (name: string) =>\r\n    `'${name}' class should be decorated with @Injectable() right after the @State() decorator`\r\n};\r\n","import { Inject, Injectable, NgZone, PLATFORM_ID } from '@angular/core';\r\nimport { isPlatformServer } from '@angular/common';\r\n\r\nimport { NgxsExecutionStrategy } from './symbols';\r\nimport { CONFIG_MESSAGES, VALIDATION_CODE } from '../configs/messages.config';\r\n\r\n@Injectable()\r\nexport class DispatchOutsideZoneNgxsExecutionStrategy implements NgxsExecutionStrategy {\r\n  constructor(private _ngZone: NgZone, @Inject(PLATFORM_ID) private _platformId: string) {\r\n    this.verifyZoneIsNotNooped(this._ngZone);\r\n  }\r\n\r\n  enter<T>(func: () => T): T {\r\n    if (isPlatformServer(this._platformId)) {\r\n      return this.runInsideAngular(func);\r\n    }\r\n    return this.runOutsideAngular(func);\r\n  }\r\n\r\n  leave<T>(func: () => T): T {\r\n    return this.runInsideAngular(func);\r\n  }\r\n\r\n  private runInsideAngular<T>(func: () => T): T {\r\n    if (NgZone.isInAngularZone()) {\r\n      return func();\r\n    }\r\n    return this._ngZone.run(func);\r\n  }\r\n\r\n  private runOutsideAngular<T>(func: () => T): T {\r\n    if (NgZone.isInAngularZone()) {\r\n      return this._ngZone.runOutsideAngular(func);\r\n    }\r\n    return func();\r\n  }\r\n\r\n  private verifyZoneIsNotNooped(ngZone: NgZone): void {\r\n    // `NoopNgZone` is not exposed publicly as it doesn't expect\r\n    // to be used outside of the core Angular code, thus we just have\r\n    // to check if the zone doesn't extend or instanceof `NgZone`\r\n    if (ngZone instanceof NgZone) {\r\n      return;\r\n    }\r\n\r\n    console.warn(CONFIG_MESSAGES[VALIDATION_CODE.ZONE_WARNING]());\r\n  }\r\n}\r\n","import { Injectable, InjectionToken, Type } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { PlainObject, StateClass } from '@ngxs/store/internals';\r\nimport { SharedSelectorOptions, Callback } from './internal/internals';\r\nimport { NgxsExecutionStrategy } from './execution/symbols';\r\nimport { DispatchOutsideZoneNgxsExecutionStrategy } from './execution/dispatch-outside-zone-ngxs-execution-strategy';\r\nimport { StateToken } from './state-token/state-token';\r\n\r\nexport const ROOT_STATE_TOKEN = new InjectionToken<any>('ROOT_STATE_TOKEN');\r\nexport const FEATURE_STATE_TOKEN = new InjectionToken<any>('FEATURE_STATE_TOKEN');\r\nexport const NGXS_PLUGINS = new InjectionToken('NGXS_PLUGINS');\r\nexport const NG_TEST_MODE = new InjectionToken<Callback<boolean>>('NG_TEST_MODE');\r\nexport const NG_DEV_MODE = new InjectionToken<Callback<boolean>>('NG_DEV_MODE');\r\n\r\nexport const META_KEY = 'NGXS_META';\r\nexport const META_OPTIONS_KEY = 'NGXS_OPTIONS_META';\r\nexport const SELECTOR_META_KEY = 'NGXS_SELECTOR_META';\r\n\r\nexport type NgxsLifeCycle = Partial<NgxsOnChanges> &\r\n  Partial<NgxsOnInit> &\r\n  Partial<NgxsAfterBootstrap>;\r\n\r\nexport type NgxsPluginFn = (state: any, mutation: any, next: NgxsNextPluginFn) => any;\r\n\r\n/**\r\n * The NGXS config settings.\r\n */\r\n@Injectable()\r\nexport class NgxsConfig {\r\n  /**\r\n   * Run in development mode. This will add additional debugging features:\r\n   * - Object.freeze on the state and actions to guarantee immutability\r\n   * (default: false)\r\n   */\r\n  developmentMode: boolean;\r\n  compatibility: {\r\n    /**\r\n     * Support a strict Content Security Policy.\r\n     * This will circumvent some optimisations that violate a strict CSP through the use of `new Function(...)`.\r\n     * (default: false)\r\n     */\r\n    strictContentSecurityPolicy: boolean;\r\n  };\r\n  /**\r\n   * Determines the execution context to perform async operations inside. An implementation can be\r\n   * provided to override the default behaviour where the async operations are run\r\n   * outside Angular's zone but all observable behaviours of NGXS are run back inside Angular's zone.\r\n   * These observable behaviours are from:\r\n   *   `@Select(...)`, `store.select(...)`, `actions.subscribe(...)` or `store.dispatch(...).subscribe(...)`\r\n   * Every `zone.run` causes Angular to run change detection on the whole tree (`app.tick()`) so of your\r\n   * application doesn't rely on zone.js running change detection then you can switch to the\r\n   * `NoopNgxsExecutionStrategy` that doesn't interact with zones.\r\n   * (default: null)\r\n   */\r\n  executionStrategy: Type<NgxsExecutionStrategy>;\r\n  /**\r\n   * Defining the default state before module initialization\r\n   * This is convenient if we need to create a define our own set of states.\r\n   * @deprecated will be removed after v4\r\n   * (default: {})\r\n   */\r\n  defaultsState: PlainObject = {};\r\n  /**\r\n   * Defining shared selector options\r\n   */\r\n  selectorOptions: SharedSelectorOptions = {\r\n    injectContainerState: true, // TODO: default is true in v3, will change in v4\r\n    suppressErrors: true // TODO: default is true in v3, will change in v4\r\n  };\r\n\r\n  constructor() {\r\n    this.compatibility = {\r\n      strictContentSecurityPolicy: false\r\n    };\r\n    this.executionStrategy = DispatchOutsideZoneNgxsExecutionStrategy;\r\n  }\r\n}\r\n\r\nexport type StateOperator<T> = (existing: Readonly<T>) => T;\r\n\r\n/**\r\n * State context provided to the actions in the state.\r\n */\r\nexport interface StateContext<T> {\r\n  /**\r\n   * Get the current state.\r\n   */\r\n  getState(): T;\r\n\r\n  /**\r\n   * Reset the state to a new value.\r\n   */\r\n  setState(val: T | StateOperator<T>): T;\r\n\r\n  /**\r\n   * Patch the existing state with the provided value.\r\n   */\r\n  patchState(val: Partial<T>): T;\r\n\r\n  /**\r\n   * Dispatch a new action and return the dispatched observable.\r\n   */\r\n  dispatch(actions: any | any[]): Observable<void>;\r\n}\r\n\r\nexport type NgxsNextPluginFn = (state: any, mutation: any) => any;\r\n\r\n/**\r\n * Plugin interface\r\n */\r\nexport interface NgxsPlugin {\r\n  /**\r\n   * Handle the state/action before its submitted to the state handlers.\r\n   */\r\n  handle(state: any, action: any, next: NgxsNextPluginFn): any;\r\n}\r\n\r\n/**\r\n * Options that can be provided to the store.\r\n */\r\nexport interface StoreOptions<T> {\r\n  /**\r\n   * Name of the state. Required.\r\n   */\r\n  name: string | StateToken<T>;\r\n\r\n  /**\r\n   * Default values for the state. If not provided, uses empty object.\r\n   */\r\n  defaults?: T;\r\n\r\n  /**\r\n   * Sub states for the given state.\r\n   */\r\n  children?: StateClass[];\r\n}\r\n\r\n/**\r\n * Represents a basic change from a previous to a new value for a single state instance.\r\n * Passed as a value in a NgxsSimpleChanges object to the ngxsOnChanges hook.\r\n */\r\nexport class NgxsSimpleChange<T = any> {\r\n  constructor(\r\n    public readonly previousValue: T,\r\n    public readonly currentValue: T,\r\n    public readonly firstChange: boolean\r\n  ) {}\r\n}\r\n\r\n/**\r\n * On init interface\r\n */\r\nexport interface NgxsOnInit {\r\n  ngxsOnInit(ctx?: StateContext<any>): void | any;\r\n}\r\n\r\n/**\r\n * On change interface\r\n */\r\nexport interface NgxsOnChanges {\r\n  ngxsOnChanges(change: NgxsSimpleChange): void;\r\n}\r\n\r\n/**\r\n * After bootstrap interface\r\n */\r\nexport interface NgxsAfterBootstrap {\r\n  ngxsAfterBootstrap(ctx?: StateContext<any>): void;\r\n}\r\n\r\nexport type NgxsModuleOptions = Partial<NgxsConfig>;\r\n","import { InjectionToken } from '@angular/core';\r\n\r\n/*\r\n * Internal execution strategy injection token\r\n */\r\nexport const NGXS_EXECUTION_STRATEGY = new InjectionToken<NgxsExecutionStrategy>(\r\n  'NGXS_EXECUTION_STRATEGY'\r\n);\r\n\r\n/*\r\n * Execution strategy interface\r\n */\r\nexport interface NgxsExecutionStrategy {\r\n  enter<T>(func: () => T): T;\r\n  leave<T>(func: () => T): T;\r\n}\r\n","/**\r\n * Returns the type from an action instance/class.\r\n * @ignore\r\n */\r\nexport function getActionTypeFromInstance(action: any): string | undefined {\r\n  if (action.constructor && action.constructor.type) {\r\n    return action.constructor.type;\r\n  }\r\n\r\n  return action.type;\r\n}\r\n\r\n/**\r\n * Matches a action\r\n * @ignore\r\n */\r\nexport function actionMatcher(action1: any) {\r\n  const type1 = getActionTypeFromInstance(action1);\r\n\r\n  return function(action2: any) {\r\n    return type1 === getActionTypeFromInstance(action2);\r\n  };\r\n}\r\n\r\n/**\r\n * Set a deeply nested value. Example:\r\n *\r\n *   setValue({ foo: { bar: { eat: false } } },\r\n *      'foo.bar.eat', true) //=> { foo: { bar: { eat: true } } }\r\n *\r\n * While it traverses it also creates new objects from top down.\r\n *\r\n * @ignore\r\n */\r\nexport const setValue = (obj: any, prop: string, val: any) => {\r\n  obj = { ...obj };\r\n\r\n  const split = prop.split('.');\r\n  const lastIndex = split.length - 1;\r\n\r\n  split.reduce((acc, part, index) => {\r\n    if (index === lastIndex) {\r\n      acc[part] = val;\r\n    } else {\r\n      acc[part] = Array.isArray(acc[part]) ? acc[part].slice() : { ...acc[part] };\r\n    }\r\n\r\n    return acc && acc[part];\r\n  }, obj);\r\n\r\n  return obj;\r\n};\r\n\r\n/**\r\n * Get a deeply nested value. Example:\r\n *\r\n *    getValue({ foo: bar: [] }, 'foo.bar') //=> []\r\n *\r\n * @ignore\r\n */\r\nexport const getValue = (obj: any, prop: string): any =>\r\n  prop.split('.').reduce((acc: any, part: string) => acc && acc[part], obj);\r\n","import { PlainObjectOf, StateClass } from '@ngxs/store/internals';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport {\r\n  META_KEY,\r\n  META_OPTIONS_KEY,\r\n  NgxsConfig,\r\n  NgxsSimpleChange,\r\n  SELECTOR_META_KEY,\r\n  StoreOptions\r\n} from '../symbols';\r\nimport { ActionHandlerMetaData } from '../actions/symbols';\r\nimport { getValue } from '../utils/utils';\r\n\r\nfunction asReadonly<T>(value: T): Readonly<T> {\r\n  return value;\r\n}\r\n\r\n// inspired from https://stackoverflow.com/a/43674389\r\nexport interface StateClassInternal<T = any, U = any> extends StateClass<T> {\r\n  [META_KEY]?: MetaDataModel;\r\n  [META_OPTIONS_KEY]?: StoreOptions<U>;\r\n}\r\n\r\nexport type StateKeyGraph = PlainObjectOf<string[]>;\r\nexport type StatesByName = PlainObjectOf<StateClassInternal>;\r\n\r\nexport interface StateOperations<T> {\r\n  getState(): T;\r\n\r\n  setState(val: T): T;\r\n\r\n  dispatch(actions: any | any[]): Observable<void>;\r\n}\r\n\r\nexport interface MetaDataModel {\r\n  name: string | null;\r\n  actions: PlainObjectOf<ActionHandlerMetaData[]>;\r\n  defaults: any;\r\n  path: string | null;\r\n  selectFromAppState: SelectFromState | null;\r\n  children?: StateClassInternal[];\r\n}\r\n\r\nexport type SelectFromState = (state: any) => any;\r\n\r\nexport interface SharedSelectorOptions {\r\n  injectContainerState?: boolean;\r\n  suppressErrors?: boolean;\r\n}\r\n\r\nexport interface SelectorMetaDataModel {\r\n  selectFromAppState: SelectFromState | null;\r\n  originalFn: Function | null;\r\n  containerClass: any;\r\n  selectorName: string | null;\r\n  getSelectorOptions: () => SharedSelectorOptions;\r\n}\r\n\r\nexport interface MappedStore {\r\n  name: string;\r\n  isInitialised: boolean;\r\n  actions: PlainObjectOf<ActionHandlerMetaData[]>;\r\n  defaults: any;\r\n  instance: any;\r\n  depth: string;\r\n}\r\n\r\nexport interface StatesAndDefaults {\r\n  defaults: any;\r\n  states: MappedStore[];\r\n}\r\n\r\nexport type Callback<T = any, V = any> = (...args: V[]) => T;\r\n\r\nexport interface RootStateDiff<T> {\r\n  currentAppState: T;\r\n  newAppState: T;\r\n}\r\n\r\n/**\r\n * Ensures metadata is attached to the class and returns it.\r\n *\r\n * @ignore\r\n */\r\nexport function ensureStoreMetadata(target: StateClassInternal): MetaDataModel {\r\n  if (!target.hasOwnProperty(META_KEY)) {\r\n    const defaultMetadata: MetaDataModel = {\r\n      name: null,\r\n      actions: {},\r\n      defaults: {},\r\n      path: null,\r\n      selectFromAppState: null,\r\n      children: []\r\n    };\r\n\r\n    Object.defineProperty(target, META_KEY, { value: defaultMetadata });\r\n  }\r\n  return getStoreMetadata(target);\r\n}\r\n\r\n/**\r\n * Get the metadata attached to the state class if it exists.\r\n *\r\n * @ignore\r\n */\r\nexport function getStoreMetadata(target: StateClassInternal): MetaDataModel {\r\n  return target[META_KEY]!;\r\n}\r\n\r\n// closure variable used to store the global options\r\nlet _globalSelectorOptions: SharedSelectorOptions = {};\r\n\r\nexport const globalSelectorOptions = asReadonly({\r\n  get(): Readonly<SharedSelectorOptions> {\r\n    return _globalSelectorOptions;\r\n  },\r\n  set(value: Readonly<SharedSelectorOptions>) {\r\n    _globalSelectorOptions = { ...value };\r\n  }\r\n});\r\n\r\n/**\r\n * Ensures metadata is attached to the selector and returns it.\r\n *\r\n * @ignore\r\n */\r\nexport function ensureSelectorMetadata(target: Function): SelectorMetaDataModel {\r\n  if (!target.hasOwnProperty(SELECTOR_META_KEY)) {\r\n    const defaultMetadata: SelectorMetaDataModel = {\r\n      selectFromAppState: null,\r\n      originalFn: null,\r\n      containerClass: null,\r\n      selectorName: null,\r\n      getSelectorOptions: () => ({})\r\n    };\r\n\r\n    Object.defineProperty(target, SELECTOR_META_KEY, { value: defaultMetadata });\r\n  }\r\n\r\n  return getSelectorMetadata(target);\r\n}\r\n\r\n/**\r\n * Get the metadata attached to the selector if it exists.\r\n *\r\n * @ignore\r\n */\r\nexport function getSelectorMetadata(target: any): SelectorMetaDataModel {\r\n  return target[SELECTOR_META_KEY];\r\n}\r\n\r\n/**\r\n * Get a deeply nested value. Example:\r\n *\r\n *    getValue({ foo: bar: [] }, 'foo.bar') //=> []\r\n *\r\n * Note: This is not as fast as the `fastPropGetter` but is strict Content Security Policy compliant.\r\n * See perf hit: https://jsperf.com/fast-value-getter-given-path/1\r\n *\r\n * @ignore\r\n */\r\nfunction compliantPropGetter(paths: string[]): (x: any) => any {\r\n  const copyOfPaths = paths.slice();\r\n  return obj => copyOfPaths.reduce((acc: any, part: string) => acc && acc[part], obj);\r\n}\r\n\r\n/**\r\n * The generated function is faster than:\r\n * - pluck (Observable operator)\r\n * - memoize\r\n *\r\n * @ignore\r\n */\r\nfunction fastPropGetter(paths: string[]): (x: any) => any {\r\n  const segments = paths;\r\n  let seg = 'store.' + segments[0];\r\n  let i = 0;\r\n  const l = segments.length;\r\n\r\n  let expr = seg;\r\n  while (++i < l) {\r\n    expr = expr + ' && ' + (seg = seg + '.' + segments[i]);\r\n  }\r\n\r\n  const fn = new Function('store', 'return ' + expr + ';');\r\n\r\n  return <(x: any) => any>fn;\r\n}\r\n\r\n/**\r\n * Get a deeply nested value. Example:\r\n *\r\n *    getValue({ foo: bar: [] }, 'foo.bar') //=> []\r\n *\r\n * @ignore\r\n */\r\nexport function propGetter(paths: string[], config: NgxsConfig) {\r\n  if (config && config.compatibility && config.compatibility.strictContentSecurityPolicy) {\r\n    return compliantPropGetter(paths);\r\n  } else {\r\n    return fastPropGetter(paths);\r\n  }\r\n}\r\n\r\n/**\r\n * Given an array of states, it will return a object graph. Example:\r\n *    const states = [\r\n *      Cart,\r\n *      CartSaved,\r\n *      CartSavedItems\r\n *    ]\r\n *\r\n * would return:\r\n *\r\n *  const graph = {\r\n *    cart: ['saved'],\r\n *    saved: ['items'],\r\n *    items: []\r\n *  };\r\n *\r\n * @ignore\r\n */\r\nexport function buildGraph(stateClasses: StateClassInternal[]): StateKeyGraph {\r\n  const findName = (stateClass: StateClassInternal) => {\r\n    const meta = stateClasses.find(g => g === stateClass);\r\n    if (!meta) {\r\n      throw new Error(\r\n        `Child state not found: ${stateClass}. \\r\\nYou may have forgotten to add states to module`\r\n      );\r\n    }\r\n\r\n    return meta[META_KEY]!.name!;\r\n  };\r\n\r\n  return stateClasses.reduce<StateKeyGraph>(\r\n    (result: StateKeyGraph, stateClass: StateClassInternal) => {\r\n      const { name, children } = stateClass[META_KEY]!;\r\n      result[name!] = (children || []).map(findName);\r\n      return result;\r\n    },\r\n    {}\r\n  );\r\n}\r\n\r\n/**\r\n * Given a states array, returns object graph\r\n * returning the name and state metadata. Example:\r\n *\r\n *  const graph = {\r\n *    cart: { metadata }\r\n *  };\r\n *\r\n * @ignore\r\n */\r\nexport function nameToState(states: StateClassInternal[]): PlainObjectOf<StateClassInternal> {\r\n  return states.reduce<PlainObjectOf<StateClassInternal>>(\r\n    (result: PlainObjectOf<StateClassInternal>, stateClass: StateClassInternal) => {\r\n      const meta = stateClass[META_KEY]!;\r\n      result[meta.name!] = stateClass;\r\n      return result;\r\n    },\r\n    {}\r\n  );\r\n}\r\n\r\n/**\r\n * Given a object relationship graph will return the full path\r\n * for the child items. Example:\r\n *\r\n *  const graph = {\r\n *    cart: ['saved'],\r\n *    saved: ['items'],\r\n *    items: []\r\n *  };\r\n *\r\n * would return:\r\n *\r\n *  const r = {\r\n *    cart: 'cart',\r\n *    saved: 'cart.saved',\r\n *    items: 'cart.saved.items'\r\n *  };\r\n *\r\n * @ignore\r\n */\r\nexport function findFullParentPath(\r\n  obj: StateKeyGraph,\r\n  newObj: PlainObjectOf<string> = {}\r\n): PlainObjectOf<string> {\r\n  const visit = (child: StateKeyGraph, keyToFind: string): string | null => {\r\n    for (const key in child) {\r\n      if (child.hasOwnProperty(key) && child[key].indexOf(keyToFind) >= 0) {\r\n        const parent = visit(child, key);\r\n        return parent !== null ? `${parent}.${key}` : key;\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  for (const key in obj) {\r\n    if (obj.hasOwnProperty(key)) {\r\n      const parent = visit(obj, key);\r\n      newObj[key] = parent ? `${parent}.${key}` : key;\r\n    }\r\n  }\r\n\r\n  return newObj;\r\n}\r\n\r\n/**\r\n * Given a object graph, it will return the items topologically sorted Example:\r\n *\r\n *  const graph = {\r\n *    cart: ['saved'],\r\n *    saved: ['items'],\r\n *    items: []\r\n *  };\r\n *\r\n * would return:\r\n *\r\n *  const results = [\r\n *    'items',\r\n *    'saved',\r\n *    'cart'\r\n *  ];\r\n *\r\n * @ignore\r\n */\r\nexport function topologicalSort(graph: StateKeyGraph): string[] {\r\n  const sorted: string[] = [];\r\n  const visited: PlainObjectOf<boolean> = {};\r\n\r\n  const visit = (name: string, ancestors: string[] = []) => {\r\n    if (!Array.isArray(ancestors)) {\r\n      ancestors = [];\r\n    }\r\n\r\n    ancestors.push(name);\r\n    visited[name] = true;\r\n\r\n    graph[name].forEach((dep: string) => {\r\n      if (ancestors.indexOf(dep) >= 0) {\r\n        throw new Error(\r\n          `Circular dependency '${dep}' is required by '${name}': ${ancestors.join(' -> ')}`\r\n        );\r\n      }\r\n\r\n      if (visited[dep]) {\r\n        return;\r\n      }\r\n\r\n      visit(dep, ancestors.slice(0));\r\n    });\r\n\r\n    if (sorted.indexOf(name) < 0) {\r\n      sorted.push(name);\r\n    }\r\n  };\r\n\r\n  Object.keys(graph).forEach(k => visit(k));\r\n\r\n  return sorted.reverse();\r\n}\r\n\r\n/**\r\n * Returns if the parameter is a object or not.\r\n *\r\n * @ignore\r\n */\r\nexport function isObject(obj: any) {\r\n  return (typeof obj === 'object' && obj !== null) || typeof obj === 'function';\r\n}\r\n\r\nexport function getStateDiffChanges<T>(\r\n  mappedStore: MappedStore,\r\n  diff: RootStateDiff<T>\r\n): NgxsSimpleChange {\r\n  const previousValue: T = getValue(diff.currentAppState, mappedStore.depth);\r\n  const currentValue: T = getValue(diff.newAppState, mappedStore.depth);\r\n  return new NgxsSimpleChange(previousValue, currentValue, !mappedStore.isInitialised);\r\n}\r\n","import { OperatorFunction, Observable } from 'rxjs';\r\nimport { map, filter } from 'rxjs/operators';\r\nimport { getActionTypeFromInstance } from '../utils/utils';\r\nimport { ActionContext, ActionStatus } from '../actions-stream';\r\n\r\nexport interface ActionCompletion<T = any, E = Error> {\r\n  action: T;\r\n  result: {\r\n    successful: boolean;\r\n    canceled: boolean;\r\n    error?: E;\r\n  };\r\n}\r\n\r\nexport function ofAction<T>(allowedType: any): OperatorFunction<ActionContext, T>;\r\nexport function ofAction<T>(...allowedTypes: any[]): OperatorFunction<ActionContext, T>;\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will grab actions that have just been dispatched as well as actions that have completed\r\n */\r\nexport function ofAction(...allowedTypes: any[]) {\r\n  return ofActionOperator(allowedTypes);\r\n}\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will ONLY grab actions that have just been dispatched\r\n */\r\nexport function ofActionDispatched(...allowedTypes: any[]) {\r\n  return ofActionOperator(allowedTypes, [ActionStatus.Dispatched]);\r\n}\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will ONLY grab actions that have just been successfully completed\r\n */\r\nexport function ofActionSuccessful(...allowedTypes: any[]) {\r\n  return ofActionOperator(allowedTypes, [ActionStatus.Successful]);\r\n}\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will ONLY grab actions that have just been canceled\r\n */\r\nexport function ofActionCanceled(...allowedTypes: any[]) {\r\n  return ofActionOperator(allowedTypes, [ActionStatus.Canceled]);\r\n}\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will ONLY grab actions that have just been completed\r\n */\r\nexport function ofActionCompleted(...allowedTypes: any[]) {\r\n  const allowedStatuses = [\r\n    ActionStatus.Successful,\r\n    ActionStatus.Canceled,\r\n    ActionStatus.Errored\r\n  ];\r\n  return ofActionOperator(allowedTypes, allowedStatuses, mapActionResult);\r\n}\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will ONLY grab actions that have just thrown an error\r\n */\r\nexport function ofActionErrored(...allowedTypes: any[]) {\r\n  return ofActionOperator(allowedTypes, [ActionStatus.Errored]);\r\n}\r\n\r\nfunction ofActionOperator<T = any>(\r\n  allowedTypes: any[],\r\n  statuses?: ActionStatus[],\r\n  mapOperator: () => OperatorFunction<ActionContext, T> = mapAction\r\n) {\r\n  const allowedMap = createAllowedActionTypesMap(allowedTypes);\r\n  const allowedStatusMap = statuses && createAllowedStatusesMap(statuses);\r\n  return function(o: Observable<ActionContext>) {\r\n    return o.pipe(\r\n      filterStatus(allowedMap, allowedStatusMap),\r\n      mapOperator()\r\n    );\r\n  };\r\n}\r\n\r\nfunction filterStatus(allowedTypes: FilterMap, allowedStatuses?: FilterMap) {\r\n  return filter((ctx: ActionContext) => {\r\n    const actionType = getActionTypeFromInstance(ctx.action)!;\r\n    const typeMatch = allowedTypes[actionType];\r\n    const statusMatch = allowedStatuses ? allowedStatuses[ctx.status] : true;\r\n    return typeMatch && statusMatch;\r\n  });\r\n}\r\n\r\nfunction mapActionResult(): OperatorFunction<ActionContext, ActionCompletion> {\r\n  return map(({ action, status, error }: ActionContext) => {\r\n    return <ActionCompletion>{\r\n      action,\r\n      result: {\r\n        successful: ActionStatus.Successful === status,\r\n        canceled: ActionStatus.Canceled === status,\r\n        error\r\n      }\r\n    };\r\n  });\r\n}\r\n\r\nfunction mapAction<T = any>(): OperatorFunction<ActionContext, T> {\r\n  return map((ctx: ActionContext) => <T>ctx.action);\r\n}\r\n\r\ninterface FilterMap {\r\n  [key: string]: boolean;\r\n}\r\n\r\nfunction createAllowedActionTypesMap(types: any[]): FilterMap {\r\n  return types.reduce(\r\n    (filterMap: FilterMap, klass: any) => {\r\n      filterMap[getActionTypeFromInstance(klass)!] = true;\r\n      return filterMap;\r\n    },\r\n    <FilterMap>{}\r\n  );\r\n}\r\n\r\nfunction createAllowedStatusesMap(statuses: ActionStatus[]): FilterMap {\r\n  return statuses.reduce(\r\n    (filterMap: FilterMap, status: ActionStatus) => {\r\n      filterMap[status] = true;\r\n      return filterMap;\r\n    },\r\n    <FilterMap>{}\r\n  );\r\n}\r\n","import { MonoTypeOperatorFunction, Observable, Observer } from 'rxjs';\r\nimport { NgxsExecutionStrategy } from '../execution/symbols';\r\n\r\n/**\r\n * Returns operator that will run\r\n * `subscribe` outside of the ngxs execution context\r\n */\r\nexport function leaveNgxs<T>(\r\n  ngxsExecutionStrategy: NgxsExecutionStrategy\r\n): MonoTypeOperatorFunction<T> {\r\n  return (source: Observable<T>) => {\r\n    return new Observable((sink: Observer<T>) => {\r\n      return source.subscribe({\r\n        next(value) {\r\n          ngxsExecutionStrategy.leave(() => sink.next(value));\r\n        },\r\n        error(error) {\r\n          ngxsExecutionStrategy.leave(() => sink.error(error));\r\n        },\r\n        complete() {\r\n          ngxsExecutionStrategy.leave(() => sink.complete());\r\n        }\r\n      });\r\n    });\r\n  };\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\n\r\nimport { NgxsExecutionStrategy, NGXS_EXECUTION_STRATEGY } from './symbols';\r\n\r\n@Injectable()\r\nexport class InternalNgxsExecutionStrategy implements NgxsExecutionStrategy {\r\n  constructor(\r\n    @Inject(NGXS_EXECUTION_STRATEGY) private _executionStrategy: NgxsExecutionStrategy\r\n  ) {}\r\n\r\n  enter<T>(func: () => T): T {\r\n    return this._executionStrategy.enter(func);\r\n  }\r\n\r\n  leave<T>(func: () => T): T {\r\n    return this._executionStrategy.leave(func);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject, Observable } from 'rxjs';\r\n\r\nimport { leaveNgxs } from './operators/leave-ngxs';\r\nimport { InternalNgxsExecutionStrategy } from './execution/internal-ngxs-execution-strategy';\r\n\r\n/**\r\n * Status of a dispatched action\r\n */\r\nexport const enum ActionStatus {\r\n  Dispatched = 'DISPATCHED',\r\n  Successful = 'SUCCESSFUL',\r\n  Canceled = 'CANCELED',\r\n  Errored = 'ERRORED'\r\n}\r\n\r\nexport interface ActionContext<T = any> {\r\n  status: ActionStatus;\r\n  action: T;\r\n  error?: Error;\r\n}\r\n\r\n/**\r\n * Custom Subject that ensures that subscribers are notified of values in the order that they arrived.\r\n * A standard Subject does not have this guarantee.\r\n * For example, given the following code:\r\n * ```typescript\r\n *   const subject = new Subject<string>();\r\n     subject.subscribe(value => {\r\n       if (value === 'start') subject.next('end');\r\n     });\r\n     subject.subscribe(value => { });\r\n     subject.next('start');\r\n * ```\r\n * When `subject` is a standard `Subject<T>` the second subscriber would recieve `end` and then `start`.\r\n * When `subject` is a `OrderedSubject<T>` the second subscriber would recieve `start` and then `end`.\r\n */\r\nexport class OrderedSubject<T> extends Subject<T> {\r\n  private _itemQueue: T[] = [];\r\n  private _busyPushingNext = false;\r\n\r\n  next(value?: T): void {\r\n    if (this._busyPushingNext) {\r\n      this._itemQueue.unshift(value!);\r\n      return;\r\n    }\r\n    this._busyPushingNext = true;\r\n    super.next(value);\r\n    while (this._itemQueue.length > 0) {\r\n      const nextValue = this._itemQueue.pop();\r\n      super.next(nextValue);\r\n    }\r\n    this._busyPushingNext = false;\r\n  }\r\n}\r\n\r\n/**\r\n * Internal Action stream that is emitted anytime an action is dispatched.\r\n */\r\n@Injectable()\r\nexport class InternalActions extends OrderedSubject<ActionContext> {}\r\n\r\n/**\r\n * Action stream that is emitted anytime an action is dispatched.\r\n *\r\n * You can listen to this in services to react without stores.\r\n */\r\n@Injectable()\r\nexport class Actions extends Observable<any> {\r\n  // This has to be `Observable<ActionContext>` in the v4. Because `InternalActions`\r\n  // is a `Subject<ActionContext>`. Leave it as `any` to avoid breaking changes\r\n  constructor(\r\n    internalActions$: InternalActions,\r\n    internalExecutionStrategy: InternalNgxsExecutionStrategy\r\n  ) {\r\n    super(observer => {\r\n      const childSubscription = internalActions$\r\n        .pipe(leaveNgxs(internalExecutionStrategy))\r\n        .subscribe({\r\n          next: ctx => observer.next(ctx),\r\n          error: error => observer.error(error),\r\n          complete: () => observer.complete()\r\n        });\r\n\r\n      observer.add(childSubscription);\r\n    });\r\n  }\r\n}\r\n","export type StateFn = (...args: any[]) => any;\r\n\r\n/**\r\n * Composes a array of functions from left to right. Example:\r\n *\r\n *      compose([fn, final])(state, action);\r\n *\r\n * then the funcs have a signature like:\r\n *\r\n *      function fn (state, action, next) {\r\n *          console.log('here', state, action, next);\r\n *          return next(state, action);\r\n *      }\r\n *\r\n *      function final (state, action) {\r\n *          console.log('here', state, action);\r\n *          return state;\r\n *      }\r\n *\r\n * the last function should not call `next`.\r\n *\r\n * @ignore\r\n */\r\nexport const compose = (funcs: StateFn[]) => (...args: any[]) => {\r\n  const curr = funcs.shift()!;\r\n  return curr(...args, (...nextArgs: any[]) => compose(funcs)(...nextArgs));\r\n};\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nimport { PlainObject } from '@ngxs/store/internals';\r\n\r\n/**\r\n * BehaviorSubject of the entire state.\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class StateStream extends BehaviorSubject<PlainObject> {\r\n  constructor() {\r\n    super({});\r\n  }\r\n}\r\n","import { Inject, Injectable, Optional, SkipSelf } from '@angular/core';\r\nimport { NGXS_PLUGINS, NgxsPlugin, NgxsPluginFn } from './symbols';\r\n\r\n@Injectable()\r\nexport class PluginManager {\r\n  public plugins: NgxsPluginFn[] = [];\r\n\r\n  constructor(\r\n    @Optional()\r\n    @SkipSelf()\r\n    private _parentManager: PluginManager,\r\n    @Inject(NGXS_PLUGINS)\r\n    @Optional()\r\n    private _pluginHandlers: NgxsPlugin[]\r\n  ) {\r\n    this.registerHandlers();\r\n  }\r\n\r\n  private get rootPlugins(): NgxsPluginFn[] {\r\n    return (this._parentManager && this._parentManager.plugins) || this.plugins;\r\n  }\r\n\r\n  private registerHandlers(): void {\r\n    const pluginHandlers: NgxsPluginFn[] = this.getPluginHandlers();\r\n    this.rootPlugins.push(...pluginHandlers);\r\n  }\r\n\r\n  private getPluginHandlers(): NgxsPluginFn[] {\r\n    const handlers: NgxsPlugin[] = this._pluginHandlers || [];\r\n    return handlers.map(\r\n      (plugin: NgxsPlugin) =>\r\n        (plugin.handle ? plugin.handle.bind(plugin) : plugin) as NgxsPluginFn\r\n    );\r\n  }\r\n}\r\n","import { ErrorHandler, Injectable } from '@angular/core';\r\nimport { EMPTY, forkJoin, Observable, of, Subject, throwError } from 'rxjs';\r\nimport { exhaustMap, filter, shareReplay, take } from 'rxjs/operators';\r\n\r\nimport { compose } from '../utils/compose';\r\nimport { ActionContext, ActionStatus, InternalActions } from '../actions-stream';\r\nimport { StateStream } from './state-stream';\r\nimport { PluginManager } from '../plugin-manager';\r\nimport { InternalNgxsExecutionStrategy } from '../execution/internal-ngxs-execution-strategy';\r\nimport { leaveNgxs } from '../operators/leave-ngxs';\r\n\r\n/**\r\n * Internal Action result stream that is emitted when an action is completed.\r\n * This is used as a method of returning the action result to the dispatcher\r\n * for the observable returned by the dispatch(...) call.\r\n * The dispatcher then asynchronously pushes the result from this stream onto the main action stream as a result.\r\n */\r\n@Injectable()\r\nexport class InternalDispatchedActionResults extends Subject<ActionContext> {}\r\n\r\n@Injectable()\r\nexport class InternalDispatcher {\r\n  constructor(\r\n    private _errorHandler: ErrorHandler,\r\n    private _actions: InternalActions,\r\n    private _actionResults: InternalDispatchedActionResults,\r\n    private _pluginManager: PluginManager,\r\n    private _stateStream: StateStream,\r\n    private _ngxsExecutionStrategy: InternalNgxsExecutionStrategy\r\n  ) {}\r\n\r\n  /**\r\n   * Dispatches event(s).\r\n   */\r\n  dispatch(actionOrActions: any | any[]): Observable<any> {\r\n    const result = this._ngxsExecutionStrategy.enter(() =>\r\n      this.dispatchByEvents(actionOrActions)\r\n    );\r\n\r\n    result.subscribe({\r\n      error: error =>\r\n        this._ngxsExecutionStrategy.leave(() => {\r\n          try {\r\n            this._errorHandler.handleError(error);\r\n          } catch {}\r\n        })\r\n    });\r\n\r\n    return result.pipe(leaveNgxs(this._ngxsExecutionStrategy));\r\n  }\r\n\r\n  private dispatchByEvents(actionOrActions: any | any[]): Observable<any> {\r\n    if (Array.isArray(actionOrActions)) {\r\n      return forkJoin(actionOrActions.map(a => this.dispatchSingle(a)));\r\n    } else {\r\n      return this.dispatchSingle(actionOrActions);\r\n    }\r\n  }\r\n\r\n  private dispatchSingle(action: any): Observable<any> {\r\n    const prevState = this._stateStream.getValue();\r\n    const plugins = this._pluginManager.plugins;\r\n\r\n    return (compose([\r\n      ...plugins,\r\n      (nextState: any, nextAction: any) => {\r\n        if (nextState !== prevState) {\r\n          this._stateStream.next(nextState);\r\n        }\r\n        const actionResult$ = this.getActionResultStream(nextAction);\r\n        actionResult$.subscribe(ctx => this._actions.next(ctx));\r\n        this._actions.next({ action: nextAction, status: ActionStatus.Dispatched });\r\n        return this.createDispatchObservable(actionResult$);\r\n      }\r\n    ])(prevState, action) as Observable<any>).pipe(shareReplay());\r\n  }\r\n\r\n  private getActionResultStream(action: any): Observable<ActionContext> {\r\n    return this._actionResults.pipe(\r\n      filter(\r\n        (ctx: ActionContext) => ctx.action === action && ctx.status !== ActionStatus.Dispatched\r\n      ),\r\n      take(1),\r\n      shareReplay()\r\n    );\r\n  }\r\n\r\n  private createDispatchObservable(actionResult$: Observable<ActionContext>): Observable<any> {\r\n    return actionResult$\r\n      .pipe(\r\n        exhaustMap((ctx: ActionContext) => {\r\n          switch (ctx.status) {\r\n            case ActionStatus.Successful:\r\n              return of(this._stateStream.getValue());\r\n            case ActionStatus.Errored:\r\n              return throwError(ctx.error);\r\n            default:\r\n              return EMPTY;\r\n          }\r\n        })\r\n      )\r\n      .pipe(shareReplay());\r\n  }\r\n}\r\n","/**\r\n * Object freeze code\r\n * https://github.com/jsdf/deep-freeze\r\n */\r\nexport const deepFreeze = (o: any) => {\r\n  Object.freeze(o);\r\n\r\n  const oIsFunction = typeof o === 'function';\r\n  const hasOwnProp = Object.prototype.hasOwnProperty;\r\n\r\n  Object.getOwnPropertyNames(o).forEach(function(prop) {\r\n    if (\r\n      hasOwnProp.call(o, prop) &&\r\n      (oIsFunction ? prop !== 'caller' && prop !== 'callee' && prop !== 'arguments' : true) &&\r\n      o[prop] !== null &&\r\n      (typeof o[prop] === 'object' || typeof o[prop] === 'function') &&\r\n      !Object.isFrozen(o[prop])\r\n    ) {\r\n      deepFreeze(o[prop]);\r\n    }\r\n  });\r\n\r\n  return o;\r\n};\r\n","import { Inject, Injectable } from '@angular/core';\r\nimport { NG_DEV_MODE, NG_TEST_MODE } from '../symbols';\r\nimport { Callback } from '../internal/internals';\r\n\r\n@Injectable()\r\nexport class HostEnvironment {\r\n  constructor(\r\n    @Inject(NG_DEV_MODE) public isDevMode: Callback<boolean>,\r\n    @Inject(NG_TEST_MODE) public isTestMode: Callback<boolean>\r\n  ) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport {\r\n  CONFIG_MESSAGES as MESSAGES,\r\n  VALIDATION_CODE as CODE\r\n} from '../configs/messages.config';\r\nimport { NgxsConfig } from '../symbols';\r\nimport { HostEnvironment } from '../host-environment/host-environment';\r\n\r\n@Injectable()\r\nexport class ConfigValidator {\r\n  constructor(private _host: HostEnvironment, private _config: NgxsConfig) {}\r\n\r\n  private get isIncorrectProduction(): boolean {\r\n    return !this._host.isDevMode() && this._config.developmentMode;\r\n  }\r\n\r\n  private get isIncorrectDevelopment(): boolean {\r\n    return this._host.isDevMode() && !this._config.developmentMode;\r\n  }\r\n\r\n  public verifyDevMode(): void {\r\n    if (this._host.isTestMode()) {\r\n      return;\r\n    }\r\n\r\n    if (this.isIncorrectProduction) {\r\n      console.warn(MESSAGES[CODE.INCORRECT_PRODUCTION]());\r\n    } else if (this.isIncorrectDevelopment) {\r\n      console.warn(MESSAGES[CODE.INCORRECT_DEVELOPMENT]());\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { StateOperations, StatesAndDefaults } from '../internal/internals';\r\nimport { InternalDispatcher } from '../internal/dispatcher';\r\nimport { StateStream } from './state-stream';\r\nimport { NgxsConfig } from '../symbols';\r\nimport { deepFreeze } from '../utils/freeze';\r\nimport { ConfigValidator } from '../internal/config-validator';\r\n\r\n/**\r\n * State Context factory class\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class InternalStateOperations {\r\n  constructor(\r\n    private _stateStream: StateStream,\r\n    private _dispatcher: InternalDispatcher,\r\n    private _config: NgxsConfig,\r\n    configValidator: ConfigValidator\r\n  ) {\r\n    configValidator.verifyDevMode();\r\n  }\r\n\r\n  /**\r\n   * Returns the root state operators.\r\n   */\r\n  getRootStateOperations(): StateOperations<any> {\r\n    const rootStateOperations = {\r\n      getState: () => this._stateStream.getValue(),\r\n      setState: (newState: any) => this._stateStream.next(newState),\r\n      dispatch: (actions: any[]) => this._dispatcher.dispatch(actions)\r\n    };\r\n\r\n    if (this._config.developmentMode) {\r\n      return this.ensureStateAndActionsAreImmutable(rootStateOperations);\r\n    }\r\n\r\n    return rootStateOperations;\r\n  }\r\n\r\n  private ensureStateAndActionsAreImmutable(root: StateOperations<any>): StateOperations<any> {\r\n    return {\r\n      getState: () => root.getState(),\r\n      setState: value => {\r\n        const frozenValue = deepFreeze(value);\r\n        return root.setState(frozenValue);\r\n      },\r\n      dispatch: actions => {\r\n        return root.dispatch(actions);\r\n      }\r\n    };\r\n  }\r\n\r\n  setStateToTheCurrentWithNew(results: StatesAndDefaults): void {\r\n    const stateOperations: StateOperations<any> = this.getRootStateOperations();\r\n\r\n    // Get our current stream\r\n    const currentState = stateOperations.getState();\r\n    // Set the state to the current + new\r\n    stateOperations.setState({ ...currentState, ...results.defaults });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { NgxsLifeCycle, NgxsSimpleChange, StateContext, StateOperator } from '../symbols';\r\nimport { getStateDiffChanges, MappedStore } from '../internal/internals';\r\nimport { setValue, getValue } from '../utils/utils';\r\nimport { InternalStateOperations } from '../internal/state-operations';\r\nimport { simplePatch } from './state-operators';\r\n\r\n/**\r\n * State Context factory class\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class StateContextFactory {\r\n  constructor(private _internalStateOperations: InternalStateOperations) {}\r\n\r\n  /**\r\n   * Create the state context\r\n   */\r\n  createStateContext<T>(mappedStore: MappedStore): StateContext<T> {\r\n    const root = this._internalStateOperations.getRootStateOperations();\r\n\r\n    function getState(currentAppState: any): T {\r\n      return getValue(currentAppState, mappedStore.depth);\r\n    }\r\n\r\n    function setStateValue(currentAppState: any, newValue: T): any {\r\n      const newAppState = setValue(currentAppState, mappedStore.depth, newValue);\r\n      const instance: NgxsLifeCycle = mappedStore.instance;\r\n\r\n      if (instance.ngxsOnChanges) {\r\n        const change: NgxsSimpleChange = getStateDiffChanges<T>(mappedStore, {\r\n          currentAppState,\r\n          newAppState\r\n        });\r\n\r\n        instance.ngxsOnChanges(change);\r\n      }\r\n\r\n      root.setState(newAppState);\r\n      return newAppState;\r\n      // In doing this refactoring I noticed that there is a 'bug' where the\r\n      // application state is returned instead of this state slice.\r\n      // This has worked this way since the beginning see:\r\n      // https://github.com/ngxs/store/blame/324c667b4b7debd8eb979006c67ca0ae347d88cd/src/state-factory.ts\r\n      // This needs to be fixed, but is a 'breaking' change.\r\n      // I will do this fix in a subsequent PR and we can decide how to handle it.\r\n    }\r\n\r\n    function setStateFromOperator(currentAppState: any, stateOperator: StateOperator<T>) {\r\n      const local = getState(currentAppState);\r\n      const newValue = stateOperator(local);\r\n      return setStateValue(currentAppState, newValue);\r\n    }\r\n\r\n    function isStateOperator(value: T | StateOperator<T>): value is StateOperator<T> {\r\n      return typeof value === 'function';\r\n    }\r\n\r\n    return {\r\n      getState(): T {\r\n        const currentAppState = root.getState();\r\n        return getState(currentAppState);\r\n      },\r\n      patchState(val: Partial<T>): T {\r\n        const currentAppState = root.getState();\r\n        const patchOperator = simplePatch<T>(val);\r\n        return setStateFromOperator(currentAppState, patchOperator);\r\n      },\r\n      setState(val: T | StateOperator<T>): T {\r\n        const currentAppState = root.getState();\r\n        return isStateOperator(val)\r\n          ? setStateFromOperator(currentAppState, val)\r\n          : setStateValue(currentAppState, val);\r\n      },\r\n      dispatch(actions: any | any[]): Observable<void> {\r\n        return root.dispatch(actions);\r\n      }\r\n    };\r\n  }\r\n}\r\n","import {\r\n  CONFIG_MESSAGES as MESSAGES,\r\n  VALIDATION_CODE as CODE\r\n} from '../configs/messages.config';\r\nimport { StateOperator } from '../symbols';\r\n\r\nexport function simplePatch<T>(val: Partial<T>): StateOperator<T> {\r\n  return (existingState: Readonly<T>) => {\r\n    if (Array.isArray(val)) {\r\n      throw new Error(MESSAGES[CODE.PATCHING_ARRAY]());\r\n    } else if (typeof val !== 'object') {\r\n      throw new Error(MESSAGES[CODE.PATCHING_PRIMITIVE]());\r\n    }\r\n\r\n    const newState: any = { ...(existingState as any) };\r\n    for (const key in val) {\r\n      // deep clone for patch compatibility\r\n      // noinspection JSUnfilteredForInLoop (IDE)\r\n      newState[key] = (val as any)[key];\r\n    }\r\n\r\n    return newState as T;\r\n  };\r\n}\r\n","import {\r\n  getStoreMetadata,\r\n  MetaDataModel,\r\n  StateClassInternal,\r\n  StatesByName\r\n} from '../internal/internals';\r\nimport {\r\n  CONFIG_MESSAGES as MESSAGES,\r\n  VALIDATION_CODE as CODE\r\n} from '../configs/messages.config';\r\n\r\nexport abstract class StoreValidators {\r\n  public static stateNameRegex: RegExp = new RegExp('^[a-zA-Z0-9_]+$');\r\n\r\n  public static stateNameErrorMessage(name: string) {\r\n    return MESSAGES[CODE.STATE_NAME](name);\r\n  }\r\n\r\n  public static checkCorrectStateName(name: string | null) {\r\n    if (!name) {\r\n      throw new Error(MESSAGES[CODE.STATE_NAME_PROPERTY]());\r\n    }\r\n\r\n    if (!this.stateNameRegex.test(name)) {\r\n      throw new Error(this.stateNameErrorMessage(name));\r\n    }\r\n  }\r\n\r\n  public static checkStateNameIsUnique(\r\n    state: StateClassInternal,\r\n    statesByName: StatesByName\r\n  ): string {\r\n    const meta: MetaDataModel = this.getValidStateMeta(state);\r\n    const stateName: string = meta!.name as string;\r\n    const existingState = statesByName[stateName];\r\n    if (existingState && existingState !== state) {\r\n      throw new Error(MESSAGES[CODE.STATE_UNIQUE](stateName, state.name, existingState.name));\r\n    }\r\n    return stateName;\r\n  }\r\n\r\n  public static getValidStateMeta(state: StateClassInternal): MetaDataModel {\r\n    const meta: MetaDataModel = getStoreMetadata(state);\r\n    if (!meta) {\r\n      throw new Error(MESSAGES[CODE.STATE_DECORATOR]());\r\n    }\r\n\r\n    return meta;\r\n  }\r\n}\r\n","import { Injectable, Injector, Optional, SkipSelf, Inject } from '@angular/core';\r\nimport { forkJoin, from, Observable, of, throwError } from 'rxjs';\r\nimport {\r\n  catchError,\r\n  defaultIfEmpty,\r\n  filter,\r\n  map,\r\n  mergeMap,\r\n  shareReplay,\r\n  takeUntil\r\n} from 'rxjs/operators';\r\n\r\nimport { META_KEY, NgxsConfig } from '../symbols';\r\nimport {\r\n  buildGraph,\r\n  findFullParentPath,\r\n  isObject,\r\n  MappedStore,\r\n  MetaDataModel,\r\n  nameToState,\r\n  propGetter,\r\n  StateClassInternal,\r\n  StateKeyGraph,\r\n  StatesAndDefaults,\r\n  StatesByName,\r\n  topologicalSort\r\n} from './internals';\r\nimport { getActionTypeFromInstance, getValue, setValue } from '../utils/utils';\r\nimport { ofActionDispatched } from '../operators/of-action';\r\nimport { ActionContext, ActionStatus, InternalActions } from '../actions-stream';\r\nimport { InternalDispatchedActionResults } from '../internal/dispatcher';\r\nimport { StateContextFactory } from '../internal/state-context-factory';\r\nimport { StoreValidators } from '../utils/store-validators';\r\nimport { INITIAL_STATE_TOKEN, PlainObjectOf } from '@ngxs/store/internals';\r\n\r\n/**\r\n * State factory class\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class StateFactory {\r\n  private _connected = false;\r\n\r\n  constructor(\r\n    private _injector: Injector,\r\n    private _config: NgxsConfig,\r\n    @Optional()\r\n    @SkipSelf()\r\n    private _parentFactory: StateFactory,\r\n    private _actions: InternalActions,\r\n    private _actionResults: InternalDispatchedActionResults,\r\n    private _stateContextFactory: StateContextFactory,\r\n    @Optional()\r\n    @Inject(INITIAL_STATE_TOKEN)\r\n    private _initialState: any\r\n  ) {}\r\n\r\n  private _states: MappedStore[] = [];\r\n\r\n  public get states(): MappedStore[] {\r\n    return this._parentFactory ? this._parentFactory.states : this._states;\r\n  }\r\n\r\n  private _statesByName: StatesByName = {};\r\n\r\n  public get statesByName(): StatesByName {\r\n    return this._parentFactory ? this._parentFactory.statesByName : this._statesByName;\r\n  }\r\n\r\n  private static cloneDefaults(defaults: any): any {\r\n    let value = {};\r\n\r\n    if (Array.isArray(defaults)) {\r\n      value = defaults.slice();\r\n    } else if (isObject(defaults)) {\r\n      value = { ...defaults };\r\n    } else if (defaults === undefined) {\r\n      value = {};\r\n    } else {\r\n      value = defaults;\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  private static checkStatesAreValid(stateClasses: StateClassInternal[]): void {\r\n    stateClasses.forEach(StoreValidators.getValidStateMeta);\r\n  }\r\n\r\n  /**\r\n   * Add a new state to the global defs.\r\n   */\r\n  add(stateClasses: StateClassInternal[]): MappedStore[] {\r\n    StateFactory.checkStatesAreValid(stateClasses);\r\n    const { newStates } = this.addToStatesMap(stateClasses);\r\n    if (!newStates.length) return [];\r\n\r\n    const stateGraph: StateKeyGraph = buildGraph(newStates);\r\n    const sortedStates: string[] = topologicalSort(stateGraph);\r\n    const depths: PlainObjectOf<string> = findFullParentPath(stateGraph);\r\n    const nameGraph: PlainObjectOf<StateClassInternal> = nameToState(newStates);\r\n    const bootstrappedStores: MappedStore[] = [];\r\n\r\n    for (const name of sortedStates) {\r\n      const stateClass: StateClassInternal = nameGraph[name];\r\n      const depth: string = depths[name];\r\n      const meta: MetaDataModel = stateClass[META_KEY]!;\r\n\r\n      this.addRuntimeInfoToMeta(meta, depth);\r\n\r\n      const stateMap: MappedStore = {\r\n        name,\r\n        depth,\r\n        isInitialised: false,\r\n        actions: meta.actions,\r\n        instance: this._injector.get(stateClass),\r\n        defaults: StateFactory.cloneDefaults(meta.defaults)\r\n      };\r\n\r\n      // ensure our store hasn't already been added\r\n      // but don't throw since it could be lazy\r\n      // loaded from different paths\r\n      if (!this.hasBeenMountedAndBootstrapped(name, depth)) {\r\n        bootstrappedStores.push(stateMap);\r\n      }\r\n\r\n      this.states.push(stateMap);\r\n    }\r\n\r\n    return bootstrappedStores;\r\n  }\r\n\r\n  /**\r\n   * Add a set of states to the store and return the defaults\r\n   */\r\n  addAndReturnDefaults(stateClasses: StateClassInternal[]): StatesAndDefaults {\r\n    const classes: StateClassInternal[] = stateClasses || [];\r\n\r\n    const mappedStores: MappedStore[] = this.add(classes);\r\n    const defaults = mappedStores.reduce(\r\n      (result: any, mappedStore: MappedStore) =>\r\n        setValue(result, mappedStore.depth, mappedStore.defaults),\r\n      {}\r\n    );\r\n    return { defaults, states: mappedStores };\r\n  }\r\n\r\n  /**\r\n   * Bind the actions to the handlers\r\n   */\r\n  connectActionHandlers() {\r\n    if (this._connected) return;\r\n    this._actions\r\n      .pipe(\r\n        filter((ctx: ActionContext) => ctx.status === ActionStatus.Dispatched),\r\n        mergeMap(({ action }) =>\r\n          this.invokeActions(this._actions, action!).pipe(\r\n            map(() => <ActionContext>{ action, status: ActionStatus.Successful }),\r\n            defaultIfEmpty(<ActionContext>{ action, status: ActionStatus.Canceled }),\r\n            catchError(error =>\r\n              of(<ActionContext>{ action, status: ActionStatus.Errored, error })\r\n            )\r\n          )\r\n        )\r\n      )\r\n      .subscribe(ctx => this._actionResults.next(ctx));\r\n    this._connected = true;\r\n  }\r\n\r\n  /**\r\n   * Invoke actions on the states.\r\n   */\r\n  invokeActions(actions$: InternalActions, action: any) {\r\n    const results = [];\r\n\r\n    for (const metadata of this.states) {\r\n      const type = getActionTypeFromInstance(action)!;\r\n      const actionMetas = metadata.actions[type];\r\n\r\n      if (actionMetas) {\r\n        for (const actionMeta of actionMetas) {\r\n          const stateContext = this._stateContextFactory.createStateContext(metadata);\r\n          try {\r\n            let result = metadata.instance[actionMeta.fn](stateContext, action);\r\n\r\n            if (result instanceof Promise) {\r\n              result = from(result);\r\n            }\r\n\r\n            if (result instanceof Observable) {\r\n              if (actionMeta.options.cancelUncompleted) {\r\n                // todo: ofActionDispatched should be used with action class\r\n                result = result.pipe(\r\n                  takeUntil(actions$.pipe(ofActionDispatched(action as any)))\r\n                );\r\n              }\r\n            } else {\r\n              result = of({}).pipe(shareReplay());\r\n            }\r\n\r\n            results.push(result);\r\n          } catch (e) {\r\n            results.push(throwError(e));\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!results.length) {\r\n      results.push(of({}));\r\n    }\r\n\r\n    return forkJoin(results);\r\n  }\r\n\r\n  private addToStatesMap(\r\n    stateClasses: StateClassInternal[]\r\n  ): { newStates: StateClassInternal[] } {\r\n    const newStates: StateClassInternal[] = [];\r\n    const statesMap: StatesByName = this.statesByName;\r\n\r\n    for (const stateClass of stateClasses) {\r\n      const stateName: string = StoreValidators.checkStateNameIsUnique(stateClass, statesMap);\r\n      const unmountedState = !statesMap[stateName];\r\n      if (unmountedState) {\r\n        newStates.push(stateClass);\r\n        statesMap[stateName] = stateClass;\r\n      }\r\n    }\r\n\r\n    return { newStates };\r\n  }\r\n\r\n  private addRuntimeInfoToMeta(meta: MetaDataModel, depth: string): void {\r\n    meta.path = depth;\r\n    meta.selectFromAppState = propGetter(depth.split('.'), this._config);\r\n  }\r\n\r\n  /**\r\n   * @description\r\n   * the method checks if the state has already been added to the tree\r\n   * and completed the life cycle\r\n   * @param name\r\n   * @param path\r\n   */\r\n  private hasBeenMountedAndBootstrapped(name: string, path: string): boolean {\r\n    const valueIsBootstrappedInInitialState: boolean =\r\n      getValue(this._initialState, path) !== undefined;\r\n    return this.statesByName[name] && valueIsBootstrappedInInitialState;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { NgxsBootstrapper, PlainObject } from '@ngxs/store/internals';\r\nimport { filter, mergeMap, tap } from 'rxjs/operators';\r\n\r\nimport { StateContextFactory } from './state-context-factory';\r\nimport { InternalStateOperations } from './state-operations';\r\nimport { getStateDiffChanges, MappedStore, StatesAndDefaults } from './internals';\r\nimport { NgxsLifeCycle, NgxsSimpleChange, StateContext } from '../symbols';\r\n\r\n@Injectable()\r\nexport class LifecycleStateManager {\r\n  constructor(\r\n    private internalStateOperations: InternalStateOperations,\r\n    private stateContextFactory: StateContextFactory,\r\n    private bootstrapper: NgxsBootstrapper\r\n  ) {}\r\n\r\n  ngxsBootstrap<T>(action: T, results: StatesAndDefaults | undefined): void {\r\n    this.internalStateOperations\r\n      .getRootStateOperations()\r\n      .dispatch(action)\r\n      .pipe(\r\n        filter(() => !!results),\r\n        tap(() => this.invokeInit(results!.states)),\r\n        mergeMap(() => this.bootstrapper.appBootstrapped$),\r\n        filter(appBootstrapped => !!appBootstrapped)\r\n      )\r\n      .subscribe(() => this.invokeBootstrap(results!.states));\r\n  }\r\n\r\n  /**\r\n   * Invoke the init function on the states.\r\n   */\r\n  invokeInit(mappedStores: MappedStore[]): void {\r\n    for (const mappedStore of mappedStores) {\r\n      const instance: NgxsLifeCycle = mappedStore.instance;\r\n\r\n      if (instance.ngxsOnChanges) {\r\n        const currentAppState: PlainObject = {};\r\n        const newAppState: PlainObject = this.internalStateOperations\r\n          .getRootStateOperations()\r\n          .getState();\r\n\r\n        const firstDiffChange: NgxsSimpleChange = getStateDiffChanges(mappedStore, {\r\n          currentAppState,\r\n          newAppState\r\n        });\r\n\r\n        instance.ngxsOnChanges(firstDiffChange);\r\n      }\r\n\r\n      if (instance.ngxsOnInit) {\r\n        instance.ngxsOnInit(this.getStateContext(mappedStore));\r\n      }\r\n\r\n      mappedStore.isInitialised = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Invoke the bootstrap function on the states.\r\n   */\r\n  invokeBootstrap(mappedStores: MappedStore[]) {\r\n    for (const mappedStore of mappedStores) {\r\n      const instance: NgxsLifeCycle = mappedStore.instance;\r\n      if (instance.ngxsAfterBootstrap) {\r\n        instance.ngxsAfterBootstrap(this.getStateContext(mappedStore));\r\n      }\r\n    }\r\n  }\r\n\r\n  private getStateContext(mappedStore: MappedStore): StateContext<any> {\r\n    return this.stateContextFactory.createStateContext(mappedStore);\r\n  }\r\n}\r\n","import { memoize } from '@ngxs/store/internals';\r\n\r\nimport {\r\n  ensureSelectorMetadata,\r\n  getSelectorMetadata,\r\n  getStoreMetadata,\r\n  globalSelectorOptions,\r\n  SelectFromState,\r\n  SelectorMetaDataModel,\r\n  SharedSelectorOptions\r\n} from '../internal/internals';\r\n\r\nconst SELECTOR_OPTIONS_META_KEY = 'NGXS_SELECTOR_OPTIONS_META';\r\n\r\nexport const selectorOptionsMetaAccessor = {\r\n  getOptions: (target: any): SharedSelectorOptions => {\r\n    return (target && (<any>target)[SELECTOR_OPTIONS_META_KEY]) || {};\r\n  },\r\n  defineOptions: (target: any, options: SharedSelectorOptions) => {\r\n    if (!target) return;\r\n    (<any>target)[SELECTOR_OPTIONS_META_KEY] = options;\r\n  }\r\n};\r\n\r\ninterface CreationMetadata {\r\n  containerClass: any;\r\n  selectorName: string;\r\n  getSelectorOptions?: () => SharedSelectorOptions;\r\n}\r\n\r\ninterface RuntimeSelectorInfo {\r\n  selectorOptions: SharedSelectorOptions;\r\n  argumentSelectorFunctions: ((state: any) => any)[];\r\n}\r\n\r\n/**\r\n * Function for creating a selector\r\n * @param selectors The selectors to use to create the arguments of this function\r\n * @param originalFn The original function being made into a selector\r\n * @param creationMetadata\r\n */\r\nexport function createSelector<T extends (...args: any[]) => any>(\r\n  selectors: any[] | undefined,\r\n  originalFn: T,\r\n  creationMetadata?: CreationMetadata\r\n) {\r\n  const containerClass = creationMetadata && creationMetadata.containerClass;\r\n  const wrappedFn = function wrappedSelectorFn(...args: any[]) {\r\n    const returnValue = originalFn.apply(containerClass, args);\r\n    if (returnValue instanceof Function) {\r\n      const innerMemoizedFn = memoize.apply(null, [returnValue]);\r\n      return innerMemoizedFn;\r\n    }\r\n    return returnValue;\r\n  } as T;\r\n  const memoizedFn = memoize(wrappedFn);\r\n  const selectorMetaData = setupSelectorMetadata<T>(memoizedFn, originalFn, creationMetadata);\r\n  let runtimeInfo: RuntimeSelectorInfo;\r\n\r\n  const selectFromAppState = (state: any) => {\r\n    const results = [];\r\n\r\n    runtimeInfo = runtimeInfo || getRuntimeSelectorInfo(selectorMetaData, selectors);\r\n    const { suppressErrors } = runtimeInfo.selectorOptions;\r\n    const { argumentSelectorFunctions } = runtimeInfo;\r\n\r\n    // Determine arguments from the app state using the selectors\r\n    results.push(...argumentSelectorFunctions.map(argFn => argFn(state)));\r\n\r\n    // if the lambda tries to access a something on the\r\n    // state that doesn't exist, it will throw a TypeError.\r\n    // since this is quite usual behaviour, we simply return undefined if so.\r\n    try {\r\n      return memoizedFn(...results);\r\n    } catch (ex) {\r\n      if (ex instanceof TypeError && suppressErrors) {\r\n        return undefined;\r\n      }\r\n\r\n      throw ex;\r\n    }\r\n  };\r\n\r\n  selectorMetaData.selectFromAppState = selectFromAppState;\r\n\r\n  return memoizedFn;\r\n}\r\n\r\nfunction setupSelectorMetadata<T extends (...args: any[]) => any>(\r\n  memoizedFn: T,\r\n  originalFn: T,\r\n  creationMetadata: CreationMetadata | undefined\r\n) {\r\n  const selectorMetaData = ensureSelectorMetadata(memoizedFn);\r\n  selectorMetaData.originalFn = originalFn;\r\n  let getExplicitSelectorOptions = () => ({});\r\n  if (creationMetadata) {\r\n    selectorMetaData.containerClass = creationMetadata.containerClass;\r\n    selectorMetaData.selectorName = creationMetadata.selectorName;\r\n    getExplicitSelectorOptions =\r\n      creationMetadata.getSelectorOptions || getExplicitSelectorOptions;\r\n  }\r\n  const selectorMetaDataClone = { ...selectorMetaData };\r\n  selectorMetaData.getSelectorOptions = () =>\r\n    getCustomSelectorOptions(selectorMetaDataClone, getExplicitSelectorOptions());\r\n  return selectorMetaData;\r\n}\r\n\r\nfunction getRuntimeSelectorInfo(\r\n  selectorMetaData: SelectorMetaDataModel,\r\n  selectors: any[] | undefined = []\r\n): RuntimeSelectorInfo {\r\n  const selectorOptions = selectorMetaData.getSelectorOptions();\r\n  const selectorsToApply = getSelectorsToApply(selectorMetaData, selectors);\r\n  const argumentSelectorFunctions = selectorsToApply.map(selector => getSelectorFn(selector));\r\n  return {\r\n    selectorOptions,\r\n    argumentSelectorFunctions\r\n  };\r\n}\r\n\r\nfunction getCustomSelectorOptions(\r\n  selectorMetaData: SelectorMetaDataModel,\r\n  explicitOptions: SharedSelectorOptions\r\n): SharedSelectorOptions {\r\n  const selectorOptions: SharedSelectorOptions = {\r\n    ...globalSelectorOptions.get(),\r\n    ...(selectorOptionsMetaAccessor.getOptions(selectorMetaData.containerClass) || {}),\r\n    ...(selectorOptionsMetaAccessor.getOptions(selectorMetaData.originalFn) || {}),\r\n    ...(selectorMetaData.getSelectorOptions() || {}),\r\n    ...explicitOptions\r\n  };\r\n\r\n  return selectorOptions;\r\n}\r\n\r\nfunction getSelectorsToApply(\r\n  selectorMetaData: SelectorMetaDataModel,\r\n  selectors: any[] | undefined = []\r\n) {\r\n  const selectorsToApply = [];\r\n  const canInjectContainerState =\r\n    selectors.length === 0 || selectorMetaData.getSelectorOptions().injectContainerState;\r\n  const containerClass = selectorMetaData.containerClass;\r\n  if (containerClass && canInjectContainerState) {\r\n    // If we are on a state class, add it as the first selector parameter\r\n    const metadata = getStoreMetadata(containerClass);\r\n    if (metadata) {\r\n      selectorsToApply.push(containerClass);\r\n    }\r\n  }\r\n  if (selectors) {\r\n    selectorsToApply.push(...selectors);\r\n  }\r\n  return selectorsToApply;\r\n}\r\n\r\n/**\r\n * This function gets the selector function to be used to get the selected slice from the app state\r\n * @ignore\r\n */\r\nexport function getSelectorFn(selector: any): SelectFromState {\r\n  const metadata = getSelectorMetadata(selector) || getStoreMetadata(selector);\r\n  return (metadata && metadata.selectFromAppState) || selector;\r\n}\r\n","// tslint:disable:unified-signatures\r\nimport { Inject, Injectable, Optional, Type } from '@angular/core';\r\nimport { Observable, of, Subscription, throwError } from 'rxjs';\r\nimport { catchError, distinctUntilChanged, map, take } from 'rxjs/operators';\r\nimport { INITIAL_STATE_TOKEN, PlainObject } from '@ngxs/store/internals';\r\n\r\nimport { InternalNgxsExecutionStrategy } from './execution/internal-ngxs-execution-strategy';\r\nimport { InternalStateOperations } from './internal/state-operations';\r\nimport { getSelectorFn } from './utils/selector-utils';\r\nimport { StateStream } from './internal/state-stream';\r\nimport { leaveNgxs } from './operators/leave-ngxs';\r\nimport { NgxsConfig } from './symbols';\r\nimport { StateToken } from './state-token/state-token';\r\n\r\n@Injectable()\r\nexport class Store {\r\n  constructor(\r\n    private _stateStream: StateStream,\r\n    private _internalStateOperations: InternalStateOperations,\r\n    private _config: NgxsConfig,\r\n    private _internalExecutionStrategy: InternalNgxsExecutionStrategy,\r\n    @Optional()\r\n    @Inject(INITIAL_STATE_TOKEN)\r\n    initialStateValue: any\r\n  ) {\r\n    this.initStateStream(initialStateValue);\r\n  }\r\n\r\n  /**\r\n   * Dispatches event(s).\r\n   */\r\n  dispatch(event: any | any[]): Observable<any> {\r\n    return this._internalStateOperations.getRootStateOperations().dispatch(event);\r\n  }\r\n\r\n  /**\r\n   * Selects a slice of data from the store.\r\n   */\r\n  select<T>(selector: (state: any, ...states: any[]) => T): Observable<T>;\r\n  select<T = any>(selector: string | Type<any>): Observable<T>;\r\n  select<T>(selector: StateToken<T>): Observable<T>;\r\n  select(selector: any): Observable<any> {\r\n    const selectorFn = getSelectorFn(selector);\r\n    return this._stateStream.pipe(\r\n      map(selectorFn),\r\n      catchError((err: Error): Observable<never> | Observable<undefined> => {\r\n        // if error is TypeError we swallow it to prevent usual errors with property access\r\n        const { suppressErrors } = this._config.selectorOptions;\r\n\r\n        if (err instanceof TypeError && suppressErrors) {\r\n          return of(undefined);\r\n        }\r\n\r\n        // rethrow other errors\r\n        return throwError(err);\r\n      }),\r\n      distinctUntilChanged(),\r\n      leaveNgxs(this._internalExecutionStrategy)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Select one slice of data from the store.\r\n   */\r\n\r\n  selectOnce<T>(selector: (state: any, ...states: any[]) => T): Observable<T>;\r\n  selectOnce<T = any>(selector: string | Type<any>): Observable<T>;\r\n  selectOnce<T>(selector: StateToken<T>): Observable<T>;\r\n  selectOnce(selector: any): Observable<any> {\r\n    return this.select(selector).pipe(take(1));\r\n  }\r\n\r\n  /**\r\n   * Select a snapshot from the state.\r\n   */\r\n  selectSnapshot<T>(selector: (state: any, ...states: any[]) => T): T;\r\n  selectSnapshot<T = any>(selector: string | Type<any>): T;\r\n  selectSnapshot<T>(selector: StateToken<T>): T;\r\n  selectSnapshot(selector: any): any {\r\n    const selectorFn = getSelectorFn(selector);\r\n    return selectorFn(this._stateStream.getValue());\r\n  }\r\n\r\n  /**\r\n   * Allow the user to subscribe to the root of the state\r\n   */\r\n  subscribe(fn?: (value: any) => void): Subscription {\r\n    return this._stateStream.pipe(leaveNgxs(this._internalExecutionStrategy)).subscribe(fn);\r\n  }\r\n\r\n  /**\r\n   * Return the raw value of the state.\r\n   */\r\n  snapshot(): any {\r\n    return this._internalStateOperations.getRootStateOperations().getState();\r\n  }\r\n\r\n  /**\r\n   * Reset the state to a specific point in time. This method is useful\r\n   * for plugin's who need to modify the state directly or unit testing.\r\n   */\r\n  reset(state: any) {\r\n    return this._internalStateOperations.getRootStateOperations().setState(state);\r\n  }\r\n\r\n  private initStateStream(initialStateValue: any): void {\r\n    const value: PlainObject = this._stateStream.value;\r\n    const storeIsEmpty: boolean = !value || Object.keys(value).length === 0;\r\n    if (storeIsEmpty) {\r\n      const defaultStateNotEmpty: boolean = Object.keys(this._config.defaultsState).length > 0;\r\n      const storeValues: PlainObject = defaultStateNotEmpty\r\n        ? { ...this._config.defaultsState, ...initialStateValue }\r\n        : initialStateValue;\r\n\r\n      this._stateStream.next(storeValues);\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { Store } from '../../store';\r\nimport { NgxsConfig } from '../../symbols';\r\n\r\n/**\r\n * Allows the select decorator to get access to the DI store.\r\n * @internal only use in @Select decorator\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class SelectFactory {\r\n  public static store: Store | null = null;\r\n  public static config: NgxsConfig | null = null;\r\n\r\n  constructor(store: Store, config: NgxsConfig) {\r\n    SelectFactory.store = store;\r\n    SelectFactory.config = config;\r\n  }\r\n}\r\n","import { PlainObject } from '@ngxs/store/internals';\r\n\r\n/**\r\n * Init action\r\n */\r\nexport class InitState {\r\n  static get type() {\r\n    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\r\n    return '@@INIT';\r\n  }\r\n}\r\n\r\n/**\r\n * Update action\r\n */\r\nexport class UpdateState {\r\n  static get type() {\r\n    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\r\n    return '@@UPDATE_STATE';\r\n  }\r\n\r\n  constructor(public addedStates?: PlainObject) {}\r\n}\r\n","import { ReplaySubject, Observable } from 'rxjs';\r\n\r\n/**\r\n * Keep it as a single `const` variable since this `ReplaySubject`\r\n * will be private and accessible only within this file.\r\n */\r\nconst _ivyEnabledInDevMode$ = new ReplaySubject<boolean>(1);\r\n\r\n/**\r\n * Ivy exposes helper functions to the global `window.ng` object.\r\n * Those functions are `getComponent, getContext,\r\n * getListeners, getViewComponent, getHostElement, getInjector,\r\n * getRootComponents, getDirectives, getDebugNode, markDirty`\r\n * Previously, old view engine exposed `window.ng.coreTokens` and\r\n * `window.ng.probe` if an application was in development/production.\r\n * Ivy doesn't expose these functions in production. Developers will be able\r\n * to see warnings in both JIT/AOT modes, but only if an application\r\n * is in development.\r\n */\r\nexport function setIvyEnabledInDevMode(): void {\r\n  try {\r\n    // `try-catch` will also handle server-side rendering, as\r\n    // `window is not defined` will not be thrown.\r\n    const ng = (window as any).ng;\r\n    const _ivyEnabledInDevMode =\r\n      !!ng && typeof ng.getComponent === 'function' && typeof ng.markDirty === 'function';\r\n    _ivyEnabledInDevMode$.next(_ivyEnabledInDevMode);\r\n  } catch {\r\n    _ivyEnabledInDevMode$.next(false);\r\n  } finally {\r\n    _ivyEnabledInDevMode$.complete();\r\n  }\r\n}\r\n\r\nexport function ivyEnabledInDevMode(): Observable<boolean> {\r\n  return _ivyEnabledInDevMode$.asObservable();\r\n}\r\n","import { Inject, NgModule, Optional } from '@angular/core';\r\n\r\nimport { StateFactory } from '../internal/state-factory';\r\nimport { InternalStateOperations } from '../internal/state-operations';\r\nimport { Store } from '../store';\r\nimport { SelectFactory } from '../decorators/select/select-factory';\r\nimport { NgxsConfig, ROOT_STATE_TOKEN } from '../symbols';\r\nimport {\r\n  globalSelectorOptions,\r\n  StateClassInternal,\r\n  StatesAndDefaults\r\n} from '../internal/internals';\r\nimport { LifecycleStateManager } from '../internal/lifecycle-state-manager';\r\nimport { InitState } from '../actions/actions';\r\nimport { setIvyEnabledInDevMode } from '../ivy/ivy-enabled-in-dev-mode';\r\n\r\n/**\r\n * Root module\r\n * @ignore\r\n */\r\n@NgModule()\r\nexport class NgxsRootModule {\r\n  constructor(\r\n    factory: StateFactory,\r\n    internalStateOperations: InternalStateOperations,\r\n    _store: Store,\r\n    _select: SelectFactory,\r\n    @Optional()\r\n    @Inject(ROOT_STATE_TOKEN)\r\n    states: StateClassInternal[] = [],\r\n    config: NgxsConfig,\r\n    lifecycleStateManager: LifecycleStateManager\r\n  ) {\r\n    // Validate states on having the `@Injectable()` decorator in Ivy\r\n    setIvyEnabledInDevMode();\r\n\r\n    globalSelectorOptions.set(config.selectorOptions || {});\r\n\r\n    // Add stores to the state graph and return their defaults\r\n    const results: StatesAndDefaults = factory.addAndReturnDefaults(states);\r\n\r\n    internalStateOperations.setStateToTheCurrentWithNew(results);\r\n\r\n    // Connect our actions stream\r\n    factory.connectActionHandlers();\r\n\r\n    // Dispatch the init action and invoke init and bootstrap functions after\r\n    lifecycleStateManager.ngxsBootstrap(new InitState(), results);\r\n  }\r\n}\r\n","import { Inject, NgModule, Optional } from '@angular/core';\r\n\r\nimport { Store } from '../store';\r\nimport { InternalStateOperations } from '../internal/state-operations';\r\nimport { StateFactory } from '../internal/state-factory';\r\nimport { FEATURE_STATE_TOKEN } from '../symbols';\r\nimport { LifecycleStateManager } from '../internal/lifecycle-state-manager';\r\nimport { StateClassInternal, StatesAndDefaults } from '../internal/internals';\r\nimport { UpdateState } from '../actions/actions';\r\n\r\n/**\r\n * Feature module\r\n * @ignore\r\n */\r\n@NgModule()\r\nexport class NgxsFeatureModule {\r\n  constructor(\r\n    _store: Store,\r\n    internalStateOperations: InternalStateOperations,\r\n    factory: StateFactory,\r\n    @Optional()\r\n    @Inject(FEATURE_STATE_TOKEN)\r\n    states: StateClassInternal[][] = [],\r\n    lifecycleStateManager: LifecycleStateManager\r\n  ) {\r\n    // Since FEATURE_STATE_TOKEN is a multi token, we need to\r\n    // flatten it [[Feature1State, Feature2State], [Feature3State]]\r\n    const flattenedStates: StateClassInternal[] = NgxsFeatureModule.flattenStates(states);\r\n\r\n    // add stores to the state graph and return their defaults\r\n    const results: StatesAndDefaults = factory.addAndReturnDefaults(flattenedStates);\r\n\r\n    if (results.states.length) {\r\n      internalStateOperations.setStateToTheCurrentWithNew(results);\r\n\r\n      // dispatch the update action and invoke init and bootstrap functions after\r\n      lifecycleStateManager.ngxsBootstrap(new UpdateState(results.defaults), results);\r\n    }\r\n  }\r\n\r\n  private static flattenStates(states: StateClassInternal[][] = []): StateClassInternal[] {\r\n    return states.reduce(\r\n      (total: StateClassInternal[], values: StateClassInternal[]) => total.concat(values),\r\n      []\r\n    );\r\n  }\r\n}\r\n","import {\r\n  APP_BOOTSTRAP_LISTENER,\r\n  InjectionToken,\r\n  isDevMode,\r\n  ModuleWithProviders,\r\n  NgModule,\r\n  Provider\r\n} from '@angular/core';\r\nimport {\r\n  INITIAL_STATE_TOKEN,\r\n  InitialState,\r\n  isAngularInTestMode,\r\n  NGXS_STATE_CONTEXT_FACTORY,\r\n  NGXS_STATE_FACTORY,\r\n  NgxsBootstrapper,\r\n  StateClass\r\n} from '@ngxs/store/internals';\r\n\r\nimport {\r\n  FEATURE_STATE_TOKEN,\r\n  NG_DEV_MODE,\r\n  NG_TEST_MODE,\r\n  NgxsConfig,\r\n  NgxsModuleOptions,\r\n  ROOT_STATE_TOKEN\r\n} from './symbols';\r\nimport { NGXS_EXECUTION_STRATEGY } from './execution/symbols';\r\nimport { StateFactory } from './internal/state-factory';\r\nimport { StateContextFactory } from './internal/state-context-factory';\r\nimport { Actions, InternalActions } from './actions-stream';\r\nimport { LifecycleStateManager } from './internal/lifecycle-state-manager';\r\nimport { InternalDispatchedActionResults, InternalDispatcher } from './internal/dispatcher';\r\nimport { InternalStateOperations } from './internal/state-operations';\r\nimport { Store } from './store';\r\nimport { SelectFactory } from './decorators/select/select-factory';\r\nimport { StateStream } from './internal/state-stream';\r\nimport { PluginManager } from './plugin-manager';\r\nimport { NgxsRootModule } from './modules/ngxs-root.module';\r\nimport { NgxsFeatureModule } from './modules/ngxs-feature.module';\r\nimport { DispatchOutsideZoneNgxsExecutionStrategy } from './execution/dispatch-outside-zone-ngxs-execution-strategy';\r\nimport { InternalNgxsExecutionStrategy } from './execution/internal-ngxs-execution-strategy';\r\nimport { HostEnvironment } from './host-environment/host-environment';\r\nimport { ConfigValidator } from './internal/config-validator';\r\n\r\n/**\r\n * Ngxs Module\r\n */\r\n@NgModule()\r\nexport class NgxsModule {\r\n  private static readonly ROOT_OPTIONS = new InjectionToken<NgxsModuleOptions>('ROOT_OPTIONS');\r\n\r\n  /**\r\n   * Root module factory\r\n   */\r\n  public static forRoot(\r\n    states: StateClass[] = [],\r\n    options: NgxsModuleOptions = {}\r\n  ): ModuleWithProviders<NgxsRootModule> {\r\n    return {\r\n      ngModule: NgxsRootModule,\r\n      providers: [\r\n        StateFactory,\r\n        StateContextFactory,\r\n        Actions,\r\n        InternalActions,\r\n        NgxsBootstrapper,\r\n        ConfigValidator,\r\n        HostEnvironment,\r\n        LifecycleStateManager,\r\n        InternalDispatcher,\r\n        InternalDispatchedActionResults,\r\n        InternalStateOperations,\r\n        InternalNgxsExecutionStrategy,\r\n        Store,\r\n        StateStream,\r\n        SelectFactory,\r\n        PluginManager,\r\n        ...states,\r\n        ...NgxsModule.ngxsTokenProviders(states, options)\r\n      ]\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Feature module factory\r\n   */\r\n  public static forFeature(states: StateClass[] = []): ModuleWithProviders<NgxsFeatureModule> {\r\n    return {\r\n      ngModule: NgxsFeatureModule,\r\n      providers: [\r\n        StateFactory,\r\n        PluginManager,\r\n        ...states,\r\n        {\r\n          provide: FEATURE_STATE_TOKEN,\r\n          multi: true,\r\n          useValue: states\r\n        }\r\n      ]\r\n    };\r\n  }\r\n\r\n  private static ngxsTokenProviders(\r\n    states: StateClass[],\r\n    options: NgxsModuleOptions\r\n  ): Provider[] {\r\n    return [\r\n      {\r\n        provide: NG_TEST_MODE,\r\n        useValue: isAngularInTestMode\r\n      },\r\n      {\r\n        provide: NG_DEV_MODE,\r\n        useValue: isDevMode\r\n      },\r\n      {\r\n        provide: NGXS_EXECUTION_STRATEGY,\r\n        useClass: options.executionStrategy || DispatchOutsideZoneNgxsExecutionStrategy\r\n      },\r\n      {\r\n        provide: ROOT_STATE_TOKEN,\r\n        useValue: states\r\n      },\r\n      {\r\n        provide: NgxsModule.ROOT_OPTIONS,\r\n        useValue: options\r\n      },\r\n      {\r\n        provide: NgxsConfig,\r\n        useFactory: NgxsModule.ngxsConfigFactory,\r\n        deps: [NgxsModule.ROOT_OPTIONS]\r\n      },\r\n      {\r\n        provide: APP_BOOTSTRAP_LISTENER,\r\n        useFactory: NgxsModule.appBootstrapListenerFactory,\r\n        multi: true,\r\n        deps: [NgxsBootstrapper]\r\n      },\r\n      {\r\n        provide: INITIAL_STATE_TOKEN,\r\n        useFactory: NgxsModule.getInitialState\r\n      },\r\n      {\r\n        provide: NGXS_STATE_CONTEXT_FACTORY,\r\n        useExisting: StateContextFactory\r\n      },\r\n      {\r\n        provide: NGXS_STATE_FACTORY,\r\n        useExisting: StateFactory\r\n      }\r\n    ];\r\n  }\r\n\r\n  private static ngxsConfigFactory(options: NgxsModuleOptions): NgxsConfig {\r\n    return Object.assign(new NgxsConfig(), options);\r\n  }\r\n\r\n  private static appBootstrapListenerFactory(bootstrapper: NgxsBootstrapper): Function {\r\n    return () => bootstrapper.bootstrap();\r\n  }\r\n\r\n  private static getInitialState() {\r\n    return InitialState.pop();\r\n  }\r\n}\r\n","import { ivyEnabledInDevMode } from './ivy-enabled-in-dev-mode';\r\nimport { CONFIG_MESSAGES, VALIDATION_CODE } from '../configs/messages.config';\r\n\r\n/**\r\n * All provided or injected tokens must have `@Injectable` decorator\r\n * (previously, injected tokens without `@Injectable` were allowed\r\n * if another decorator was used, e.g. pipes).\r\n */\r\nexport function ensureStateClassIsInjectable(target: any): void {\r\n  // `ÃÂµprov` is a static property added by the NGCC compiler. It always exists in\r\n  // AOT mode because this property is added before runtime. If an application is running in\r\n  // JIT mode then this property can be added by the `@Injectable()` decorator. The `@Injectable()`\r\n  // decorator has to go after the `@State()` decorator, thus we prevent users from unwanted DI errors.\r\n  ivyEnabledInDevMode().subscribe(_ivyEnabledInDevMode => {\r\n    if (_ivyEnabledInDevMode) {\r\n      const ngInjectableDef = target.ÃÂµprov;\r\n      if (!ngInjectableDef) {\r\n        // Don't warn if Ivy is disabled or `ÃÂµprov` exists on the class\r\n        console.warn(CONFIG_MESSAGES[VALIDATION_CODE.UNDECORATED_STATE_IN_IVY](target.name));\r\n      }\r\n    }\r\n  });\r\n}\r\n","import { Observable } from 'rxjs';\r\n\r\nimport { CONFIG_MESSAGES, VALIDATION_CODE } from '../../configs/messages.config';\r\nimport { propGetter } from '../../internal/internals';\r\nimport { SelectFactory } from './select-factory';\r\nimport { META_KEY } from '../../symbols';\r\nimport { StateToken } from '../../state-token/state-token';\r\nimport { ExtractTokenType } from '../../state-token/symbols';\r\n\r\nconst DOLLAR_CHAR_CODE = 36;\r\n\r\nexport function createSelectObservable<T = any>(selector: any): Observable<T> {\r\n  if (!SelectFactory.store) {\r\n    throw new Error(CONFIG_MESSAGES[VALIDATION_CODE.SELECT_FACTORY_NOT_CONNECTED]());\r\n  }\r\n\r\n  return SelectFactory.store.select(selector);\r\n}\r\n\r\nexport function createSelectorFn(name: string, rawSelector?: any, paths: string[] = []): any {\r\n  rawSelector = !rawSelector ? removeDollarAtTheEnd(name) : rawSelector;\r\n\r\n  if (typeof rawSelector === 'string') {\r\n    const propsArray: string[] = paths.length\r\n      ? [rawSelector, ...paths]\r\n      : rawSelector.split('.');\r\n    return propGetter(propsArray, SelectFactory.config!);\r\n  } else if (rawSelector[META_KEY] && rawSelector[META_KEY].path) {\r\n    return propGetter(rawSelector[META_KEY].path.split('.'), SelectFactory.config!);\r\n  }\r\n\r\n  return rawSelector;\r\n}\r\n\r\n/**\r\n * @example If `foo$` => make it just `foo`\r\n */\r\nexport function removeDollarAtTheEnd(name: string): string {\r\n  const lastCharIndex: number = name.length - 1;\r\n  const dollarAtTheEnd: boolean = name.charCodeAt(lastCharIndex) === DOLLAR_CHAR_CODE;\r\n  return dollarAtTheEnd ? name.slice(0, lastCharIndex) : name;\r\n}\r\n\r\nexport type PropertyType<T> = T extends StateToken<any>\r\n  ? Observable<ExtractTokenType<T>>\r\n  : T extends (...args: any[]) => any\r\n  ? Observable<ReturnType<T>>\r\n  : any;\r\n\r\nexport type ComponentClass<T> = {\r\n  [P in keyof T]: T[P];\r\n};\r\n\r\nexport type SelectType<T> = <\r\n  U extends ComponentClass<any> & Record<K, PropertyType<T>>,\r\n  K extends string\r\n>(\r\n  target: U,\r\n  key: K\r\n) => void;\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { NgxsExecutionStrategy } from './symbols';\r\n\r\n@Injectable()\r\nexport class NoopNgxsExecutionStrategy implements NgxsExecutionStrategy {\r\n  enter<T>(func: () => T): T {\r\n    return func();\r\n  }\r\n\r\n  leave<T>(func: () => T): T {\r\n    return func();\r\n  }\r\n}\r\n","import { TokenName } from './symbols';\r\nimport { ensureSelectorMetadata, propGetter } from '../internal/internals';\r\nimport { SelectFactory } from '../decorators/select/select-factory';\r\n\r\nexport class StateToken<T = void> {\r\n  constructor(private readonly name: TokenName<T>) {\r\n    const selectorMetadata = ensureSelectorMetadata(<any>this);\r\n    selectorMetadata.selectFromAppState = (state: any): T => {\r\n      // This is lazy initialized with the select from app state function\r\n      // so that it can get the config at the last responsible moment\r\n      const getter = propGetter([this.name], SelectFactory.config!);\r\n      selectorMetadata.selectFromAppState = getter;\r\n      return getter(state);\r\n    };\r\n  }\r\n\r\n  getName(): string {\r\n    return this.name;\r\n  }\r\n\r\n  toString(): string {\r\n    return `StateToken[${this.name}]`;\r\n  }\r\n}\r\n","import { ensureStoreMetadata } from '../internal/internals';\r\nimport { ActionType, ActionOptions } from '../actions/symbols';\r\nimport { CONFIG_MESSAGES, VALIDATION_CODE } from '../configs/messages.config';\r\n\r\n/**\r\n * Decorates a method with a action information.\r\n */\r\nexport function Action(\r\n  actions: ActionType | ActionType[],\r\n  options?: ActionOptions\r\n): MethodDecorator {\r\n  return (target: any, name: string | symbol): void => {\r\n    const isStaticMethod = target.hasOwnProperty('prototype');\r\n\r\n    if (isStaticMethod) {\r\n      throw new Error(CONFIG_MESSAGES[VALIDATION_CODE.ACTION_DECORATOR]());\r\n    }\r\n\r\n    const meta = ensureStoreMetadata(target.constructor);\r\n\r\n    if (!Array.isArray(actions)) {\r\n      actions = [actions];\r\n    }\r\n\r\n    for (const action of actions) {\r\n      const type = action.type;\r\n\r\n      if (!meta.actions[type]) {\r\n        meta.actions[type] = [];\r\n      }\r\n\r\n      meta.actions[type].push({\r\n        fn: name,\r\n        options: options || {},\r\n        type\r\n      });\r\n    }\r\n  };\r\n}\r\n","import {\r\n  ComponentClass,\r\n  createSelectObservable,\r\n  createSelectorFn,\r\n  PropertyType,\r\n  SelectType\r\n} from './symbols';\r\n\r\n/**\r\n * Decorator for selecting a slice of state from the store.\r\n */\r\nexport function Select<T>(rawSelector?: T, ...paths: string[]): SelectType<T> {\r\n  return function<\r\n    U extends ComponentClass<any> & Record<K, PropertyType<T>>,\r\n    K extends string\r\n  >(target: U, key: K): void {\r\n    const name: string = key.toString();\r\n    const selectorId = `__${name}__selector`;\r\n    const selector = createSelectorFn(name, rawSelector, paths);\r\n\r\n    Object.defineProperties(target, {\r\n      [selectorId]: {\r\n        writable: true,\r\n        enumerable: false,\r\n        configurable: true\r\n      },\r\n      [name]: {\r\n        enumerable: true,\r\n        configurable: true,\r\n        get(): PropertyType<T> {\r\n          return this[selectorId] || (this[selectorId] = createSelectObservable(selector));\r\n        }\r\n      }\r\n    });\r\n  };\r\n}\r\n","import { CONFIG_MESSAGES, VALIDATION_CODE } from '../../configs/messages.config';\r\nimport { createSelector } from '../../utils/selector-utils';\r\nimport { SelectorSpec, SelectorType } from './symbols';\r\n\r\n/**\r\n * Decorator for memoizing a state selector.\r\n */\r\nexport function Selector<T>(selectors?: T[]): SelectorType<T> {\r\n  return <U>(\r\n    target: any,\r\n    key: string | symbol,\r\n    descriptor: TypedPropertyDescriptor<SelectorSpec<T, U>>\r\n  ): TypedPropertyDescriptor<SelectorSpec<T, U>> | void => {\r\n    const isNotMethod = !(descriptor && descriptor.value !== null);\r\n\r\n    if (isNotMethod) {\r\n      throw new Error(CONFIG_MESSAGES[VALIDATION_CODE.SELECTOR_DECORATOR]());\r\n    }\r\n\r\n    const originalFn = descriptor.value;\r\n    let memoizedFn: any = null;\r\n    const newDescriptor = {\r\n      configurable: true,\r\n      get() {\r\n        // Selector initialisation deferred to here so that it is at runtime, not decorator parse time\r\n        memoizedFn =\r\n          memoizedFn ||\r\n          createSelector(\r\n            selectors,\r\n            originalFn as any,\r\n            {\r\n              containerClass: target,\r\n              selectorName: key.toString(),\r\n              getSelectorOptions() {\r\n                return {};\r\n              }\r\n            }\r\n          );\r\n        return memoizedFn;\r\n      }\r\n    };\r\n    // Add hidden property to descriptor\r\n    (<any>newDescriptor)['originalFn'] = originalFn;\r\n    return newDescriptor;\r\n  };\r\n}\r\n","import { SharedSelectorOptions } from '../internal/internals';\r\nimport { selectorOptionsMetaAccessor } from '../utils/selector-utils';\r\n\r\n/**\r\n * Decorator for setting selector options at a method or class level.\r\n */\r\nexport function SelectorOptions(options: SharedSelectorOptions) {\r\n  return <ClassDecorator & MethodDecorator>(\r\n    function decorate<T>(\r\n      target: any,\r\n      methodName: string,\r\n      descriptor: TypedPropertyDescriptor<T>\r\n    ) {\r\n      if (methodName) {\r\n        // Method Decorator\r\n        const originalFn = descriptor.value || (<any>descriptor).originalFn;\r\n        if (originalFn) {\r\n          selectorOptionsMetaAccessor.defineOptions(originalFn, options);\r\n        }\r\n      } else {\r\n        // Class Decorator\r\n        selectorOptionsMetaAccessor.defineOptions(target, options);\r\n      }\r\n    }\r\n  );\r\n}\r\n","import { StateClass } from '@ngxs/store/internals';\r\n\r\nimport { ensureStoreMetadata, MetaDataModel, StateClassInternal } from '../internal/internals';\r\nimport { META_KEY, META_OPTIONS_KEY, StoreOptions } from '../symbols';\r\nimport { StoreValidators } from '../utils/store-validators';\r\nimport { ensureStateClassIsInjectable } from '../ivy/ensure-state-class-is-injectable';\r\n\r\ninterface MutateMetaOptions<T> {\r\n  meta: MetaDataModel;\r\n  inheritedStateClass: StateClassInternal;\r\n  optionsWithInheritance: StoreOptions<T>;\r\n}\r\n\r\n/**\r\n * Decorates a class with ngxs state information.\r\n */\r\nexport function State<T>(options: StoreOptions<T>) {\r\n  function getStateOptions(inheritedStateClass: StateClassInternal): StoreOptions<T> {\r\n    const inheritanceOptions: Partial<StoreOptions<T>> =\r\n      inheritedStateClass[META_OPTIONS_KEY] || {};\r\n    return { ...inheritanceOptions, ...options } as StoreOptions<T>;\r\n  }\r\n\r\n  function mutateMetaData(params: MutateMetaOptions<T>): void {\r\n    const { meta, inheritedStateClass, optionsWithInheritance } = params;\r\n    const { children, defaults, name } = optionsWithInheritance;\r\n    const stateName: string | null =\r\n      typeof name === 'string' ? name : (name && name.getName()) || null;\r\n    StoreValidators.checkCorrectStateName(stateName);\r\n\r\n    if (inheritedStateClass.hasOwnProperty(META_KEY)) {\r\n      const inheritedMeta: Partial<MetaDataModel> = inheritedStateClass[META_KEY] || {};\r\n      meta.actions = { ...meta.actions, ...inheritedMeta.actions };\r\n    }\r\n\r\n    meta.children = children;\r\n    meta.defaults = defaults;\r\n    meta.name = stateName;\r\n  }\r\n\r\n  return (target: StateClass): void => {\r\n    ensureStateClassIsInjectable(target);\r\n    const stateClass: StateClassInternal = target;\r\n    const meta: MetaDataModel = ensureStoreMetadata(stateClass);\r\n    const inheritedStateClass: StateClassInternal = Object.getPrototypeOf(stateClass);\r\n    const optionsWithInheritance: StoreOptions<T> = getStateOptions(inheritedStateClass);\r\n    mutateMetaData({ meta, inheritedStateClass, optionsWithInheritance });\r\n    stateClass[META_OPTIONS_KEY] = optionsWithInheritance;\r\n  };\r\n}\r\n"]}